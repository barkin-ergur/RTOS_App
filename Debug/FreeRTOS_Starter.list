
FreeRTOS_Starter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800778c  0800778c  0000878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007914  08007914  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007914  08007914  00008914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800791c  0800791c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800791c  0800791c  0000891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007920  08007920  00008920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007924  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b0c  20000060  08007984  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b6c  08007984  00009b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f77  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003388  00000000  00000000  0001f007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00022390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc3  00000000  00000000  00023580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c6c  00000000  00000000  00024343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b2b  00000000  00000000  00027faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2532  00000000  00000000  0003cada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012f00c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef4  00000000  00000000  0012f050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00133f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007774 	.word	0x08007774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007774 	.word	0x08007774

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b08e      	sub	sp, #56	@ 0x38
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb4b 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f845 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8c5 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f893 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  char test[] = "UART communication has been established !!!\r\n";
 8000586:	4b1a      	ldr	r3, [pc, #104]	@ (80005f0 <main+0x80>)
 8000588:	f107 0408 	add.w	r4, r7, #8
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800059a:	c407      	stmia	r4!, {r0, r1, r2}
 800059c:	8023      	strh	r3, [r4, #0]

  HAL_UART_Transmit(&huart2, (uint8_t *)test, strlen(test), 200);
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff fe14 	bl	80001d0 <strlen>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f107 0108 	add.w	r1, r7, #8
 80005b0:	23c8      	movs	r3, #200	@ 0xc8
 80005b2:	4810      	ldr	r0, [pc, #64]	@ (80005f4 <main+0x84>)
 80005b4:	f002 fa82 	bl	8002abc <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b8:	f003 fe5a 	bl	8004270 <osKernelInitialize>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */

  uartQueue = xQueueCreate(10, sizeof(uint8_t));
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	200a      	movs	r0, #10
 80005c2:	f004 f91c 	bl	80047fe <xQueueGenericCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <main+0x88>)
 80005ca:	6013      	str	r3, [r2, #0]

  uint8_t dummy;

  HAL_UART_Receive_IT(&huart2, &dummy, 1);
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	2201      	movs	r2, #1
 80005d0:	4619      	mov	r1, r3
 80005d2:	4808      	ldr	r0, [pc, #32]	@ (80005f4 <main+0x84>)
 80005d4:	f002 fafc 	bl	8002bd0 <HAL_UART_Receive_IT>

  THREAD_UARTHandle = osThreadNew(vUARTTask, NULL, &THREAD_UART_attributes);
 80005d8:	4a08      	ldr	r2, [pc, #32]	@ (80005fc <main+0x8c>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4808      	ldr	r0, [pc, #32]	@ (8000600 <main+0x90>)
 80005de:	f003 fe91 	bl	8004304 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a07      	ldr	r2, [pc, #28]	@ (8000604 <main+0x94>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f003 fe66 	bl	80042b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x7c>
 80005f0:	080077b4 	.word	0x080077b4
 80005f4:	2000007c 	.word	0x2000007c
 80005f8:	20000104 	.word	0x20000104
 80005fc:	08007850 	.word	0x08007850
 8000600:	08000845 	.word	0x08000845
 8000604:	2000010c 	.word	0x2000010c

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	@ 0x58
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2244      	movs	r2, #68	@ 0x44
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fc1a 	bl	8006e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800062a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800062e:	f000 fee5 	bl	80013fc <HAL_PWREx_ControlVoltageScaling>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000638:	f000 f988 	bl	800094c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064e:	2302      	movs	r3, #2
 8000650:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000656:	230a      	movs	r3, #10
 8000658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4618      	mov	r0, r3
 800066c:	f000 ff1c 	bl	80014a8 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000676:	f000 f969 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2303      	movs	r3, #3
 8000680:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fae4 	bl	8001c60 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069e:	f000 f955 	bl	800094c <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3758      	adds	r7, #88	@ 0x58
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b14      	ldr	r3, [pc, #80]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006b2:	4a15      	ldr	r2, [pc, #84]	@ (8000708 <MX_USART2_UART_Init+0x5c>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	@ (8000704 <MX_USART2_UART_Init+0x58>)
 80006f0:	f002 f996 	bl	8002a20 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fa:	f000 f927 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000007c 	.word	0x2000007c
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	@ 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a2a      	ldr	r2, [pc, #168]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073a:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a24      	ldr	r2, [pc, #144]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a1e      	ldr	r2, [pc, #120]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a18      	ldr	r2, [pc, #96]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2120      	movs	r1, #32
 8000786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800078a:	f000 fdf7 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <MX_GPIO_Init+0xc8>)
 80007a6:	f000 fc3f 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80007aa:	2320      	movs	r3, #32
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f000 fc30 	bl	8001028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000800 	.word	0x48000800

080007d8 <BlinkGreenLed>:

/* USER CODE BEGIN 4 */

void BlinkGreenLed(void *arguement)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	(void) arguement;

	while(1)
	{
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80007e0:	2120      	movs	r1, #32
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e6:	f000 fde1 	bl	80013ac <HAL_GPIO_TogglePin>

		osDelay(1000);
 80007ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ee:	f003 fe1b 	bl	8004428 <osDelay>
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80007f2:	bf00      	nop
 80007f4:	e7f4      	b.n	80007e0 <BlinkGreenLed+0x8>
	...

080007f8 <UART_Sender>:
	}
}

void UART_Sender(void *arguement)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	char l_test[] = "TEST\r\n";
 8000800:	4a0e      	ldr	r2, [pc, #56]	@ (800083c <UART_Sender+0x44>)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	e892 0003 	ldmia.w	r2, {r0, r1}
 800080a:	6018      	str	r0, [r3, #0]
 800080c:	3304      	adds	r3, #4
 800080e:	8019      	strh	r1, [r3, #0]
 8000810:	3302      	adds	r3, #2
 8000812:	0c0a      	lsrs	r2, r1, #16
 8000814:	701a      	strb	r2, [r3, #0]

	(void) arguement;

	while(1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)l_test, strlen(l_test), 200);
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fcd8 	bl	80001d0 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	f107 0108 	add.w	r1, r7, #8
 8000828:	23c8      	movs	r3, #200	@ 0xc8
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <UART_Sender+0x48>)
 800082c:	f002 f946 	bl	8002abc <HAL_UART_Transmit>

		osDelay(1000);
 8000830:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000834:	f003 fdf8 	bl	8004428 <osDelay>
		HAL_UART_Transmit(&huart2, (uint8_t *)l_test, strlen(l_test), 200);
 8000838:	bf00      	nop
 800083a:	e7ec      	b.n	8000816 <UART_Sender+0x1e>
 800083c:	080077e4 	.word	0x080077e4
 8000840:	2000007c 	.word	0x2000007c

08000844 <vUARTTask>:
	}
}

void vUARTTask(void *arguement)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b092      	sub	sp, #72	@ 0x48
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uint8_t receivedByte;
	uint8_t command_buffer[20];
	uint8_t tx_buffer[40];
	uint8_t tx_size = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint8_t command_index = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    for (;;)
    {
        if (xQueueReceive(uartQueue, &receivedByte, portMAX_DELAY) == pdPASS)
 8000858:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <vUARTTask+0xdc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f107 0145 	add.w	r1, r7, #69	@ 0x45
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	4618      	mov	r0, r3
 8000866:	f004 f9c9 	bl	8004bfc <xQueueReceive>
 800086a:	4603      	mov	r3, r0
 800086c:	2b01      	cmp	r3, #1
 800086e:	d1f3      	bne.n	8000858 <vUARTTask+0x14>
        {
    		// Store the received character in the command buffer
    		command_buffer[command_index++] = receivedByte;
 8000870:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 800087a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800087e:	3348      	adds	r3, #72	@ 0x48
 8000880:	443b      	add	r3, r7
 8000882:	f803 2c18 	strb.w	r2, [r3, #-24]

    		// Check if the received character is a newline (indicating the end of a command)
    		if (receivedByte == '\n' || command_index == sizeof(command_buffer) - 1)
 8000886:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800088a:	2b0a      	cmp	r3, #10
 800088c:	d003      	beq.n	8000896 <vUARTTask+0x52>
 800088e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000892:	2b13      	cmp	r3, #19
 8000894:	d1e0      	bne.n	8000858 <vUARTTask+0x14>
    		{
    			// Null-terminate the command string
    			command_buffer[command_index] = '\0';
 8000896:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800089a:	3348      	adds	r3, #72	@ 0x48
 800089c:	443b      	add	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	f803 2c18 	strb.w	r2, [r3, #-24]

    			// Format the response
    			tx_size = snprintf((char *)tx_buffer, sizeof(tx_buffer), "RECEIVED: %s", (char *)command_buffer);
 80008a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008a8:	f107 0008 	add.w	r0, r7, #8
 80008ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000924 <vUARTTask+0xe0>)
 80008ae:	2128      	movs	r1, #40	@ 0x28
 80008b0:	f006 fa9a 	bl	8006de8 <sniprintf>
 80008b4:	4603      	mov	r3, r0
 80008b6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    			HAL_UART_Transmit(&huart2, tx_buffer, tx_size, 200);
 80008ba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008be:	b29a      	uxth	r2, r3
 80008c0:	f107 0108 	add.w	r1, r7, #8
 80008c4:	23c8      	movs	r3, #200	@ 0xc8
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <vUARTTask+0xe4>)
 80008c8:	f002 f8f8 	bl	8002abc <HAL_UART_Transmit>

    			if(!strncmp((char *)command_buffer, "GREEN ON", 8))
 80008cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008d0:	2208      	movs	r2, #8
 80008d2:	4916      	ldr	r1, [pc, #88]	@ (800092c <vUARTTask+0xe8>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f006 fac3 	bl	8006e60 <strncmp>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d108      	bne.n	80008f2 <vUARTTask+0xae>
    			{
    				THREAD_LEDHandle = osThreadNew(BlinkGreenLed, NULL, &THREAD_LED_attributes);
 80008e0:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <vUARTTask+0xec>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4813      	ldr	r0, [pc, #76]	@ (8000934 <vUARTTask+0xf0>)
 80008e6:	f003 fd0d 	bl	8004304 <osThreadNew>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a12      	ldr	r2, [pc, #72]	@ (8000938 <vUARTTask+0xf4>)
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	e011      	b.n	8000916 <vUARTTask+0xd2>
    			}
    			else if(!strncmp((char *)command_buffer, "UART SENDER", 10))
 80008f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008f6:	220a      	movs	r2, #10
 80008f8:	4910      	ldr	r1, [pc, #64]	@ (800093c <vUARTTask+0xf8>)
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fab0 	bl	8006e60 <strncmp>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d107      	bne.n	8000916 <vUARTTask+0xd2>
    			{
    				THREAD_SENDERHandle = osThreadNew(UART_Sender, NULL, &THREAD_SENDER_attributes);
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <vUARTTask+0xfc>)
 8000908:	2100      	movs	r1, #0
 800090a:	480e      	ldr	r0, [pc, #56]	@ (8000944 <vUARTTask+0x100>)
 800090c:	f003 fcfa 	bl	8004304 <osThreadNew>
 8000910:	4603      	mov	r3, r0
 8000912:	4a0d      	ldr	r2, [pc, #52]	@ (8000948 <vUARTTask+0x104>)
 8000914:	6013      	str	r3, [r2, #0]
    			}

    			command_index = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (xQueueReceive(uartQueue, &receivedByte, portMAX_DELAY) == pdPASS)
 800091c:	e79c      	b.n	8000858 <vUARTTask+0x14>
 800091e:	bf00      	nop
 8000920:	20000104 	.word	0x20000104
 8000924:	080077ec 	.word	0x080077ec
 8000928:	2000007c 	.word	0x2000007c
 800092c:	080077fc 	.word	0x080077fc
 8000930:	0800782c 	.word	0x0800782c
 8000934:	080007d9 	.word	0x080007d9
 8000938:	20000108 	.word	0x20000108
 800093c:	08007808 	.word	0x08007808
 8000940:	08007874 	.word	0x08007874
 8000944:	080007f9 	.word	0x080007f9
 8000948:	20000110 	.word	0x20000110

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	4a10      	ldr	r2, [pc, #64]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	@ 0x60
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_MspInit+0x4c>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	@ 0x58
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fa92 	bl	8000ebe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0ac      	sub	sp, #176	@ 0xb0
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2288      	movs	r2, #136	@ 0x88
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f006 fa41 	bl	8006e50 <memset>
  if(huart->Instance==USART2)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a25      	ldr	r2, [pc, #148]	@ (8000a68 <HAL_UART_MspInit+0xc0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d143      	bne.n	8000a60 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d8:	2302      	movs	r3, #2
 80009da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fb5f 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009f0:	f7ff ffac 	bl	800094c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <HAL_UART_MspInit+0xc4>)
 80009f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <HAL_UART_MspInit+0xc4>)
 80009fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_UART_MspInit+0xc4>)
 8000a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_UART_MspInit+0xc4>)
 8000a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <HAL_UART_MspInit+0xc4>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_UART_MspInit+0xc4>)
 8000a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a24:	230c      	movs	r3, #12
 8000a26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4c:	f000 faec 	bl	8001028 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2105      	movs	r1, #5
 8000a54:	2026      	movs	r0, #38	@ 0x26
 8000a56:	f000 fa32 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a5a:	2026      	movs	r0, #38	@ 0x26
 8000a5c:	f000 fa4b 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a60:	bf00      	nop
 8000a62:	37b0      	adds	r7, #176	@ 0xb0
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40021000 	.word	0x40021000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <NMI_Handler+0x4>

08000a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <MemManage_Handler+0x4>

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <BusFault_Handler+0x4>

08000a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <UsageFault_Handler+0x4>

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 f90d 	bl	8000cc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000aae:	f005 f91f 	bl	8005cf0 <xTaskGetSchedulerState>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d001      	beq.n	8000abc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ab8:	f005 ff16 	bl	80068e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_IRQn 0 */
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
    uint8_t data;

    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <USART2_IRQHandler+0x60>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	69db      	ldr	r3, [r3, #28]
 8000ad0:	f003 0320 	and.w	r3, r3, #32
 8000ad4:	2b20      	cmp	r3, #32
 8000ad6:	d110      	bne.n	8000afa <USART2_IRQHandler+0x3a>
        data = (uint8_t)(huart2.Instance->RDR & 0xFF);  // Read received byte from RDR
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <USART2_IRQHandler+0x60>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	70fb      	strb	r3, [r7, #3]
        xQueueSendFromISR(uartQueue, &data, &xHigherPriorityTaskWoken);
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <USART2_IRQHandler+0x64>)
 8000ae6:	6818      	ldr	r0, [r3, #0]
 8000ae8:	1d3a      	adds	r2, r7, #4
 8000aea:	1cf9      	adds	r1, r7, #3
 8000aec:	2300      	movs	r3, #0
 8000aee:	f003 ffe7 	bl	8004ac0 <xQueueGenericSendFromISR>
        __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE);  // Clear interrupt flag
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <USART2_IRQHandler+0x60>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2220      	movs	r2, #32
 8000af8:	621a      	str	r2, [r3, #32]
    }
    /* USER CODE END USART2_IRQn 0 */

    HAL_UART_IRQHandler(&huart2);
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <USART2_IRQHandler+0x60>)
 8000afc:	f002 f8b4 	bl	8002c68 <HAL_UART_IRQHandler>

    /* USER CODE BEGIN USART2_IRQn 1 */
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d007      	beq.n	8000b16 <USART2_IRQHandler+0x56>
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <USART2_IRQHandler+0x68>)
 8000b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	f3bf 8f4f 	dsb	sy
 8000b12:	f3bf 8f6f 	isb	sy
    /* USER CODE END USART2_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000007c 	.word	0x2000007c
 8000b24:	20000104 	.word	0x20000104
 8000b28:	e000ed04 	.word	0xe000ed04

08000b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b34:	4a14      	ldr	r2, [pc, #80]	@ (8000b88 <_sbrk+0x5c>)
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <_sbrk+0x60>)
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d102      	bne.n	8000b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <_sbrk+0x64>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <_sbrk+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <_sbrk+0x64>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4413      	add	r3, r2
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d207      	bcs.n	8000b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b5c:	f006 f992 	bl	8006e84 <__errno>
 8000b60:	4603      	mov	r3, r0
 8000b62:	220c      	movs	r2, #12
 8000b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6a:	e009      	b.n	8000b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <_sbrk+0x64>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <_sbrk+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20018000 	.word	0x20018000
 8000b8c:	00000400 	.word	0x00000400
 8000b90:	20000114 	.word	0x20000114
 8000b94:	20001b70 	.word	0x20001b70

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f006 f951 	bl	8006e90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fcbf 	bl	8000570 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c00:	08007924 	.word	0x08007924
  ldr r2, =_sbss
 8000c04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c08:	20001b6c 	.word	0x20001b6c

08000c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_2_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <HAL_Init+0x3c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <HAL_Init+0x3c>)
 8000c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
 8000c28:	f000 f93e 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2c:	200f      	movs	r0, #15
 8000c2e:	f000 f80f 	bl	8000c50 <HAL_InitTick>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	e001      	b.n	8000c42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3e:	f7ff fe8b 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40022000 	.word	0x40022000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d023      	beq.n	8000cac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c64:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_InitTick+0x70>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <HAL_InitTick+0x6c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f949 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10f      	bne.n	8000ca6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d809      	bhi.n	8000ca0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 f913 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_InitTick+0x74>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e007      	b.n	8000cb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
 8000ca4:	e004      	b.n	8000cb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e001      	b.n	8000cb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000118 	.word	0x20000118

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000118 	.word	0x20000118

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	@ (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	@ (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	@ (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	@ (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	@ 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	@ 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff29 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff3e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff31 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d008      	beq.n	8000f54 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e022      	b.n	8000f9a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 020e 	bic.w	r2, r2, #14
 8000f62:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f78:	f003 021c 	and.w	r2, r3, #28
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d005      	beq.n	8000fca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e029      	b.n	800101e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 020e 	bic.w	r2, r2, #14
 8000fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	f003 021c 	and.w	r2, r3, #28
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4798      	blx	r3
    }
  }
  return status;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e17f      	b.n	8001338 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8171 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d005      	beq.n	8001068 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d118      	bne.n	8001108 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010dc:	2201      	movs	r2, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	08db      	lsrs	r3, r3, #3
 80010f2:	f003 0201 	and.w	r2, r3, #1
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d017      	beq.n	8001144 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d123      	bne.n	8001198 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	08da      	lsrs	r2, r3, #3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3208      	adds	r2, #8
 8001158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	691a      	ldr	r2, [r3, #16]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	6939      	ldr	r1, [r7, #16]
 8001194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0203 	and.w	r2, r3, #3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ac 	beq.w	8001332 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b5f      	ldr	r3, [pc, #380]	@ (8001358 <HAL_GPIO_Init+0x330>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011de:	4a5e      	ldr	r2, [pc, #376]	@ (8001358 <HAL_GPIO_Init+0x330>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001358 <HAL_GPIO_Init+0x330>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f2:	4a5a      	ldr	r2, [pc, #360]	@ (800135c <HAL_GPIO_Init+0x334>)
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x242>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4f      	ldr	r2, [pc, #316]	@ (8001360 <HAL_GPIO_Init+0x338>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x23e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4e      	ldr	r2, [pc, #312]	@ (8001364 <HAL_GPIO_Init+0x33c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x23a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4d      	ldr	r2, [pc, #308]	@ (8001368 <HAL_GPIO_Init+0x340>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x236>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4c      	ldr	r2, [pc, #304]	@ (800136c <HAL_GPIO_Init+0x344>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x232>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4b      	ldr	r2, [pc, #300]	@ (8001370 <HAL_GPIO_Init+0x348>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x22e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4a      	ldr	r2, [pc, #296]	@ (8001374 <HAL_GPIO_Init+0x34c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x22a>
 800124e:	2306      	movs	r3, #6
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001252:	2307      	movs	r3, #7
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x244>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x244>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x244>
 800126a:	2300      	movs	r3, #0
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800127c:	4937      	ldr	r1, [pc, #220]	@ (800135c <HAL_GPIO_Init+0x334>)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800128a:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <HAL_GPIO_Init+0x350>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ae:	4a32      	ldr	r2, [pc, #200]	@ (8001378 <HAL_GPIO_Init+0x350>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_GPIO_Init+0x350>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012d8:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <HAL_GPIO_Init+0x350>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012de:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <HAL_GPIO_Init+0x350>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001302:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_GPIO_Init+0x350>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <HAL_GPIO_Init+0x350>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800132c:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_GPIO_Init+0x350>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	f47f ae78 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	48001000 	.word	0x48001000
 8001370:	48001400 	.word	0x48001400
 8001374:	48001800 	.word	0x48001800
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43d9      	mvns	r1, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	400b      	ands	r3, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40007000 	.word	0x40007000

080013fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800140a:	d130      	bne.n	800146e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800140c:	4b23      	ldr	r3, [pc, #140]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001418:	d038      	beq.n	800148c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001422:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001424:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001428:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2232      	movs	r2, #50	@ 0x32
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001440:	e002      	b.n	8001448 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3b01      	subs	r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001454:	d102      	bne.n	800145c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f2      	bne.n	8001442 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800145c:	4b0f      	ldr	r3, [pc, #60]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	695b      	ldr	r3, [r3, #20]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001468:	d110      	bne.n	800148c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e00f      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800146e:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147a:	d007      	beq.n	800148c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001484:	4a05      	ldr	r2, [pc, #20]	@ (800149c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800148a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40007000 	.word	0x40007000
 80014a0:	20000000 	.word	0x20000000
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e3ca      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ba:	4b97      	ldr	r3, [pc, #604]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014c4:	4b94      	ldr	r3, [pc, #592]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80e4 	beq.w	80016a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_RCC_OscConfig+0x4a>
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	2b0c      	cmp	r3, #12
 80014e6:	f040 808b 	bne.w	8001600 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	f040 8087 	bne.w	8001600 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014f2:	4b89      	ldr	r3, [pc, #548]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x62>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e3a2      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1a      	ldr	r2, [r3, #32]
 800150e:	4b82      	ldr	r3, [pc, #520]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <HAL_RCC_OscConfig+0x7c>
 800151a:	4b7f      	ldr	r3, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001522:	e005      	b.n	8001530 <HAL_RCC_OscConfig+0x88>
 8001524:	4b7c      	ldr	r3, [pc, #496]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001530:	4293      	cmp	r3, r2
 8001532:	d223      	bcs.n	800157c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fd55 	bl	8001fe8 <RCC_SetFlashLatencyFromMSIRange>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e383      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001548:	4b73      	ldr	r3, [pc, #460]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a72      	ldr	r2, [pc, #456]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	496d      	ldr	r1, [pc, #436]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001566:	4b6c      	ldr	r3, [pc, #432]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	4968      	ldr	r1, [pc, #416]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
 800157a:	e025      	b.n	80015c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800157c:	4b66      	ldr	r3, [pc, #408]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a65      	ldr	r2, [pc, #404]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001582:	f043 0308 	orr.w	r3, r3, #8
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b63      	ldr	r3, [pc, #396]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	4960      	ldr	r1, [pc, #384]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800159a:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	495b      	ldr	r1, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d109      	bne.n	80015c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd15 	bl	8001fe8 <RCC_SetFlashLatencyFromMSIRange>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e343      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015c8:	f000 fc4a 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b52      	ldr	r3, [pc, #328]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	f003 030f 	and.w	r3, r3, #15
 80015d8:	4950      	ldr	r1, [pc, #320]	@ (800171c <HAL_RCC_OscConfig+0x274>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
 80015e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001720 <HAL_RCC_OscConfig+0x278>)
 80015e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001724 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fb2f 	bl	8000c50 <HAL_InitTick>
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d052      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	e327      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d032      	beq.n	800166e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001608:	4b43      	ldr	r3, [pc, #268]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a42      	ldr	r2, [pc, #264]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb6c 	bl	8000cf0 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800161c:	f7ff fb68 	bl	8000cf0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e310      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800162e:	4b3a      	ldr	r3, [pc, #232]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	4b37      	ldr	r3, [pc, #220]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a36      	ldr	r2, [pc, #216]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b34      	ldr	r3, [pc, #208]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4931      	ldr	r1, [pc, #196]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001658:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	492c      	ldr	r1, [pc, #176]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e01a      	b.n	80016a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800166e:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a29      	ldr	r2, [pc, #164]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800167a:	f7ff fb39 	bl	8000cf0 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001682:	f7ff fb35 	bl	8000cf0 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e2dd      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001694:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x1da>
 80016a0:	e000      	b.n	80016a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d074      	beq.n	800179a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x21a>
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d10e      	bne.n	80016da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d10b      	bne.n	80016da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d064      	beq.n	8001798 <HAL_RCC_OscConfig+0x2f0>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d160      	bne.n	8001798 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e2ba      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x24a>
 80016e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80016ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	e026      	b.n	8001740 <HAL_RCC_OscConfig+0x298>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016fa:	d115      	bne.n	8001728 <HAL_RCC_OscConfig+0x280>
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a05      	ldr	r2, [pc, #20]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 8001702:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a02      	ldr	r2, [pc, #8]	@ (8001718 <HAL_RCC_OscConfig+0x270>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	e014      	b.n	8001740 <HAL_RCC_OscConfig+0x298>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	08007898 	.word	0x08007898
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004
 8001728:	4ba0      	ldr	r3, [pc, #640]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a9f      	ldr	r2, [pc, #636]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b9d      	ldr	r3, [pc, #628]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a9c      	ldr	r2, [pc, #624]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800173e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fad2 	bl	8000cf0 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff face 	bl	8000cf0 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e276      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	4b92      	ldr	r3, [pc, #584]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x2a8>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fabe 	bl	8000cf0 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff faba 	bl	8000cf0 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	@ 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e262      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178a:	4b88      	ldr	r3, [pc, #544]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x2d0>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d060      	beq.n	8001868 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x310>
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d119      	bne.n	80017e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d116      	bne.n	80017e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017b8:	4b7c      	ldr	r3, [pc, #496]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_OscConfig+0x328>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e23f      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b76      	ldr	r3, [pc, #472]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	4973      	ldr	r1, [pc, #460]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e4:	e040      	b.n	8001868 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d023      	beq.n	8001836 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ee:	4b6f      	ldr	r3, [pc, #444]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6e      	ldr	r2, [pc, #440]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fa79 	bl	8000cf0 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fa75 	bl	8000cf0 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e21d      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001814:	4b65      	ldr	r3, [pc, #404]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b62      	ldr	r3, [pc, #392]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	495f      	ldr	r1, [pc, #380]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
 8001834:	e018      	b.n	8001868 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b5d      	ldr	r3, [pc, #372]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5c      	ldr	r2, [pc, #368]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800183c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fa55 	bl	8000cf0 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fa51 	bl	8000cf0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1f9      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185c:	4b53      	ldr	r3, [pc, #332]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d03c      	beq.n	80018ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d01c      	beq.n	80018b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187c:	4b4b      	ldr	r3, [pc, #300]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001882:	4a4a      	ldr	r2, [pc, #296]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fa30 	bl	8000cf0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff fa2c 	bl	8000cf0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1d4      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a6:	4b41      	ldr	r3, [pc, #260]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80018a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0ef      	beq.n	8001894 <HAL_RCC_OscConfig+0x3ec>
 80018b4:	e01b      	b.n	80018ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80018b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018bc:	4a3b      	ldr	r2, [pc, #236]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa13 	bl	8000cf0 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa0f 	bl	8000cf0 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1b7      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e0:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80018e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ef      	bne.n	80018ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a6 	beq.w	8001a48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001900:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10d      	bne.n	8001928 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	4a26      	ldr	r2, [pc, #152]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001916:	6593      	str	r3, [r2, #88]	@ 0x58
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800191a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001924:	2301      	movs	r3, #1
 8001926:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001928:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <HAL_RCC_OscConfig+0x508>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d118      	bne.n	8001966 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001934:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <HAL_RCC_OscConfig+0x508>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <HAL_RCC_OscConfig+0x508>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800193e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001940:	f7ff f9d6 	bl	8000cf0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001948:	f7ff f9d2 	bl	8000cf0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e17a      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_RCC_OscConfig+0x508>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_RCC_OscConfig+0x4d8>
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800197e:	e029      	b.n	80019d4 <HAL_RCC_OscConfig+0x52c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d115      	bne.n	80019b4 <HAL_RCC_OscConfig+0x50c>
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198e:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001998:	4b04      	ldr	r3, [pc, #16]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800199e:	4a03      	ldr	r2, [pc, #12]	@ (80019ac <HAL_RCC_OscConfig+0x504>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x52c>
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40007000 	.word	0x40007000
 80019b4:	4b9c      	ldr	r3, [pc, #624]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	4a9b      	ldr	r2, [pc, #620]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c4:	4b98      	ldr	r3, [pc, #608]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ca:	4a97      	ldr	r2, [pc, #604]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019cc:	f023 0304 	bic.w	r3, r3, #4
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d016      	beq.n	8001a0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019dc:	f7ff f988 	bl	8000cf0 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff f984 	bl	8000cf0 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e12a      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 80019fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ed      	beq.n	80019e4 <HAL_RCC_OscConfig+0x53c>
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0a:	f7ff f971 	bl	8000cf0 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff f96d 	bl	8000cf0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e113      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a28:	4b7f      	ldr	r3, [pc, #508]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ed      	bne.n	8001a12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a36:	7ffb      	ldrb	r3, [r7, #31]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d105      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	4a79      	ldr	r2, [pc, #484]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 80fe 	beq.w	8001c4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	f040 80d0 	bne.w	8001bfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a5c:	4b72      	ldr	r3, [pc, #456]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d130      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d127      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11f      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001a9c:	2a07      	cmp	r2, #7
 8001a9e:	bf14      	ite	ne
 8001aa0:	2201      	movne	r2, #1
 8001aa2:	2200      	moveq	r2, #0
 8001aa4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d113      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	085b      	lsrs	r3, r3, #1
 8001aca:	3b01      	subs	r3, #1
 8001acc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d06e      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d069      	beq.n	8001bac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ad8:	4b53      	ldr	r3, [pc, #332]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ae4:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0ad      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4b      	ldr	r2, [pc, #300]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001afa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b00:	f7ff f8f6 	bl	8000cf0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7ff f8f2 	bl	8000cf0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e09a      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1a:	4b43      	ldr	r3, [pc, #268]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b26:	4b40      	ldr	r3, [pc, #256]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b40      	ldr	r3, [pc, #256]	@ (8001c2c <HAL_RCC_OscConfig+0x784>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b36:	3a01      	subs	r2, #1
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b40:	0212      	lsls	r2, r2, #8
 8001b42:	4311      	orrs	r1, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b48:	0852      	lsrs	r2, r2, #1
 8001b4a:	3a01      	subs	r2, #1
 8001b4c:	0552      	lsls	r2, r2, #21
 8001b4e:	4311      	orrs	r1, r2
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001b54:	0852      	lsrs	r2, r2, #1
 8001b56:	3a01      	subs	r2, #1
 8001b58:	0652      	lsls	r2, r2, #25
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b60:	0912      	lsrs	r2, r2, #4
 8001b62:	0452      	lsls	r2, r2, #17
 8001b64:	430a      	orrs	r2, r1
 8001b66:	4930      	ldr	r1, [pc, #192]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a2d      	ldr	r2, [pc, #180]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b84:	f7ff f8b4 	bl	8000cf0 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff f8b0 	bl	8000cf0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e058      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b9e:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001baa:	e050      	b.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e04f      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d148      	bne.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc8:	4b17      	ldr	r3, [pc, #92]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4a16      	ldr	r2, [pc, #88]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd4:	f7ff f88c 	bl	8000cf0 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff f888 	bl	8000cf0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e030      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b0e      	ldr	r3, [pc, #56]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x734>
 8001bfa:	e028      	b.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d023      	beq.n	8001c4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a08      	ldr	r2, [pc, #32]	@ (8001c28 <HAL_RCC_OscConfig+0x780>)
 8001c08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f86f 	bl	8000cf0 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c14:	e00c      	b.n	8001c30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7ff f86b 	bl	8000cf0 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d905      	bls.n	8001c30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e013      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_RCC_OscConfig+0x7b0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1ec      	bne.n	8001c16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_OscConfig+0x7b0>)
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	4905      	ldr	r1, [pc, #20]	@ (8001c58 <HAL_RCC_OscConfig+0x7b0>)
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_OscConfig+0x7b4>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	60cb      	str	r3, [r1, #12]
 8001c48:	e001      	b.n	8001c4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	feeefffc 	.word	0xfeeefffc

08001c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0e7      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b75      	ldr	r3, [pc, #468]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d910      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b72      	ldr	r3, [pc, #456]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4970      	ldr	r1, [pc, #448]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b6e      	ldr	r3, [pc, #440]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0cf      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d010      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	4b66      	ldr	r3, [pc, #408]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d908      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b63      	ldr	r3, [pc, #396]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4960      	ldr	r1, [pc, #384]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d04c      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0a6      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfe:	4b54      	ldr	r3, [pc, #336]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d115      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e09a      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d16:	4b4e      	ldr	r3, [pc, #312]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e08e      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d26:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e086      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b46      	ldr	r3, [pc, #280]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4943      	ldr	r1, [pc, #268]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7fe ffd2 	bl	8000cf0 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7fe ffce 	bl	8000cf0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e06e      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b3a      	ldr	r3, [pc, #232]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4b31      	ldr	r3, [pc, #196]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d208      	bcs.n	8001da6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d94:	4b2e      	ldr	r3, [pc, #184]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	492b      	ldr	r1, [pc, #172]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da6:	4b29      	ldr	r3, [pc, #164]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d210      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 0207 	bic.w	r2, r3, #7
 8001dbc:	4923      	ldr	r1, [pc, #140]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc4:	4b21      	ldr	r3, [pc, #132]	@ (8001e4c <HAL_RCC_ClockConfig+0x1ec>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e036      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4918      	ldr	r1, [pc, #96]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4910      	ldr	r1, [pc, #64]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e14:	f000 f824 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	490b      	ldr	r1, [pc, #44]	@ (8001e54 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e34:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_RCC_ClockConfig+0x1fc>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe ff09 	bl	8000c50 <HAL_InitTick>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e42:	7afb      	ldrb	r3, [r7, #11]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08007898 	.word	0x08007898
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e78:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x34>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d121      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d11e      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e94:	4b34      	ldr	r3, [pc, #208]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8001f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e004      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d134      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d003      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0xac>
 8001f04:	e005      	b.n	8001f12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f08:	617b      	str	r3, [r7, #20]
      break;
 8001f0a:	e005      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0e:	617b      	str	r3, [r7, #20]
      break;
 8001f10:	e002      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	617b      	str	r3, [r7, #20]
      break;
 8001f16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	3301      	adds	r3, #1
 8001f24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f26:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	fb03 f202 	mul.w	r2, r3, r2
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	0e5b      	lsrs	r3, r3, #25
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	3301      	adds	r3, #1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f58:	69bb      	ldr	r3, [r7, #24]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	@ 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	080078b0 	.word	0x080078b0
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	007a1200 	.word	0x007a1200

08001f78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b03      	ldr	r3, [pc, #12]	@ (8001f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000000 	.word	0x20000000

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4904      	ldr	r1, [pc, #16]	@ (8001fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	080078a8 	.word	0x080078a8

08001fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fc0:	f7ff ffda 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	0adb      	lsrs	r3, r3, #11
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	4904      	ldr	r1, [pc, #16]	@ (8001fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	080078a8 	.word	0x080078a8

08001fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002000:	f7ff f9ee 	bl	80013e0 <HAL_PWREx_GetVoltageRange>
 8002004:	6178      	str	r0, [r7, #20]
 8002006:	e014      	b.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	4a24      	ldr	r2, [pc, #144]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	@ 0x58
 8002014:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002020:	f7ff f9de 	bl	80013e0 <HAL_PWREx_GetVoltageRange>
 8002024:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002030:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002038:	d10b      	bne.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b80      	cmp	r3, #128	@ 0x80
 800203e:	d919      	bls.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2ba0      	cmp	r3, #160	@ 0xa0
 8002044:	d902      	bls.n	800204c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002046:	2302      	movs	r3, #2
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	e013      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800204c:	2301      	movs	r3, #1
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e010      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	@ 0x80
 8002056:	d902      	bls.n	800205e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002058:	2303      	movs	r3, #3
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	e00a      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b80      	cmp	r3, #128	@ 0x80
 8002062:	d102      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002064:	2302      	movs	r3, #2
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e004      	b.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b70      	cmp	r3, #112	@ 0x70
 800206e:	d101      	bne.n	8002074 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 0207 	bic.w	r2, r3, #7
 800207c:	4909      	ldr	r1, [pc, #36]	@ (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	429a      	cmp	r2, r3
 8002090:	d001      	beq.n	8002096 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40022000 	.word	0x40022000

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b4:	2300      	movs	r3, #0
 80020b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d041      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020cc:	d02a      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80020d2:	d824      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020d8:	d008      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80020de:	d81e      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020e8:	d010      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020ea:	e018      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020ec:	4b86      	ldr	r3, [pc, #536]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a85      	ldr	r2, [pc, #532]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f8:	e015      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fabb 	bl	800267c <RCCEx_PLLSAI1_Config>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800210a:	e00c      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3320      	adds	r3, #32
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fba6 	bl	8002864 <RCCEx_PLLSAI2_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800211c:	e003      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	74fb      	strb	r3, [r7, #19]
      break;
 8002122:	e000      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10b      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800212c:	4b76      	ldr	r3, [pc, #472]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002132:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800213a:	4973      	ldr	r1, [pc, #460]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002142:	e001      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d041      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002158:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800215c:	d02a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800215e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002162:	d824      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002168:	d008      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800216a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800216e:	d81e      	bhi.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00a      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002178:	d010      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800217a:	e018      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800217c:	4b62      	ldr	r3, [pc, #392]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4a61      	ldr	r2, [pc, #388]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002186:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002188:	e015      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3304      	adds	r3, #4
 800218e:	2100      	movs	r1, #0
 8002190:	4618      	mov	r0, r3
 8002192:	f000 fa73 	bl	800267c <RCCEx_PLLSAI1_Config>
 8002196:	4603      	mov	r3, r0
 8002198:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800219a:	e00c      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3320      	adds	r3, #32
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb5e 	bl	8002864 <RCCEx_PLLSAI2_Config>
 80021a8:	4603      	mov	r3, r0
 80021aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ac:	e003      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	74fb      	strb	r3, [r7, #19]
      break;
 80021b2:	e000      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80021b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021bc:	4b52      	ldr	r3, [pc, #328]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80021ca:	494f      	ldr	r1, [pc, #316]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80021d2:	e001      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d4:	7cfb      	ldrb	r3, [r7, #19]
 80021d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80a0 	beq.w	8002326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e6:	2300      	movs	r3, #0
 80021e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ea:	4b47      	ldr	r3, [pc, #284]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021fa:	2300      	movs	r3, #0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00d      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	4b41      	ldr	r3, [pc, #260]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002204:	4a40      	ldr	r2, [pc, #256]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	@ 0x58
 800220c:	4b3e      	ldr	r3, [pc, #248]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002218:	2301      	movs	r3, #1
 800221a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3a      	ldr	r2, [pc, #232]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002226:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002228:	f7fe fd62 	bl	8000cf0 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800222e:	e009      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe fd5e 	bl	8000cf0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	74fb      	strb	r3, [r7, #19]
        break;
 8002242:	e005      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002244:	4b31      	ldr	r3, [pc, #196]	@ (800230c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ef      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d15c      	bne.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002256:	4b2c      	ldr	r3, [pc, #176]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002260:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d01f      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	429a      	cmp	r2, r3
 8002272:	d019      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002274:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800227e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002280:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	4a20      	ldr	r2, [pc, #128]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002296:	4a1c      	ldr	r2, [pc, #112]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022a0:	4a19      	ldr	r2, [pc, #100]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d016      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fd1d 	bl	8000cf0 <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b8:	e00b      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fd19 	bl	8000cf0 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d902      	bls.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	74fb      	strb	r3, [r7, #19]
            break;
 80022d0:	e006      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ec      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022f6:	4904      	ldr	r1, [pc, #16]	@ (8002308 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80022fe:	e009      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	74bb      	strb	r3, [r7, #18]
 8002304:	e006      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002314:	7c7b      	ldrb	r3, [r7, #17]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b9e      	ldr	r3, [pc, #632]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	4a9d      	ldr	r2, [pc, #628]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002324:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002332:	4b98      	ldr	r3, [pc, #608]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002338:	f023 0203 	bic.w	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002340:	4994      	ldr	r1, [pc, #592]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00a      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002354:	4b8f      	ldr	r3, [pc, #572]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f023 020c 	bic.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002362:	498c      	ldr	r1, [pc, #560]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002376:	4b87      	ldr	r3, [pc, #540]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	4983      	ldr	r1, [pc, #524]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00a      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002398:	4b7e      	ldr	r3, [pc, #504]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a6:	497b      	ldr	r1, [pc, #492]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ba:	4b76      	ldr	r3, [pc, #472]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	4972      	ldr	r1, [pc, #456]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00a      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ea:	496a      	ldr	r1, [pc, #424]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fe:	4b65      	ldr	r3, [pc, #404]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002404:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240c:	4961      	ldr	r1, [pc, #388]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800240e:	4313      	orrs	r3, r2
 8002410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00a      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002420:	4b5c      	ldr	r3, [pc, #368]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002426:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800242e:	4959      	ldr	r1, [pc, #356]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002442:	4b54      	ldr	r3, [pc, #336]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002448:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002450:	4950      	ldr	r1, [pc, #320]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002464:	4b4b      	ldr	r3, [pc, #300]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002472:	4948      	ldr	r1, [pc, #288]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002486:	4b43      	ldr	r3, [pc, #268]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	493f      	ldr	r1, [pc, #252]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d028      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024b6:	4937      	ldr	r1, [pc, #220]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c8:	4b32      	ldr	r3, [pc, #200]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a31      	ldr	r2, [pc, #196]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024d2:	60d3      	str	r3, [r2, #12]
 80024d4:	e011      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024de:	d10c      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	2101      	movs	r1, #1
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f8c8 	bl	800267c <RCCEx_PLLSAI1_Config>
 80024ec:	4603      	mov	r3, r0
 80024ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d028      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002506:	4b23      	ldr	r3, [pc, #140]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002514:	491f      	ldr	r1, [pc, #124]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002524:	d106      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002526:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a1a      	ldr	r2, [pc, #104]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002530:	60d3      	str	r3, [r2, #12]
 8002532:	e011      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002538:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800253c:	d10c      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3304      	adds	r3, #4
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f899 	bl	800267c <RCCEx_PLLSAI1_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800254e:	7cfb      	ldrb	r3, [r7, #19]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d02b      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002572:	4908      	ldr	r1, [pc, #32]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002582:	d109      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a02      	ldr	r2, [pc, #8]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800258e:	60d3      	str	r3, [r2, #12]
 8002590:	e014      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025a0:	d10c      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2101      	movs	r1, #1
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f867 	bl	800267c <RCCEx_PLLSAI1_Config>
 80025ae:	4603      	mov	r3, r0
 80025b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025b2:	7cfb      	ldrb	r3, [r7, #19]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d02f      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025d6:	4928      	ldr	r1, [pc, #160]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80025e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025e6:	d10d      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f844 	bl	800267c <RCCEx_PLLSAI1_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d014      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
 8002602:	e011      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800260c:	d10c      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3320      	adds	r3, #32
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f000 f925 	bl	8002864 <RCCEx_PLLSAI2_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002634:	4b10      	ldr	r3, [pc, #64]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002642:	490d      	ldr	r1, [pc, #52]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002666:	4904      	ldr	r1, [pc, #16]	@ (8002678 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800266e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000

0800267c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800268a:	4b75      	ldr	r3, [pc, #468]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d018      	beq.n	80026c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002696:	4b72      	ldr	r3, [pc, #456]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d10d      	bne.n	80026c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
       ||
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
       ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d047      	beq.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	e044      	b.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d018      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x86>
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d825      	bhi.n	8002720 <RCCEx_PLLSAI1_Config+0xa4>
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d002      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x62>
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d009      	beq.n	80026f0 <RCCEx_PLLSAI1_Config+0x74>
 80026dc:	e020      	b.n	8002720 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026de:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d11d      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ee:	e01a      	b.n	8002726 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026f0:	4b5b      	ldr	r3, [pc, #364]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d116      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002700:	e013      	b.n	800272a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002702:	4b57      	ldr	r3, [pc, #348]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800270e:	4b54      	ldr	r3, [pc, #336]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800271e:	e006      	b.n	800272e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e004      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002726:	bf00      	nop
 8002728:	e002      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10d      	bne.n	8002752 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6819      	ldr	r1, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	430b      	orrs	r3, r1
 800274c:	4944      	ldr	r1, [pc, #272]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d17d      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002758:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a40      	ldr	r2, [pc, #256]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800275e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002764:	f7fe fac4 	bl	8000cf0 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800276a:	e009      	b.n	8002780 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800276c:	f7fe fac0 	bl	8000cf0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d902      	bls.n	8002780 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	73fb      	strb	r3, [r7, #15]
        break;
 800277e:	e005      	b.n	800278c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002780:	4b37      	ldr	r3, [pc, #220]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ef      	bne.n	800276c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d160      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002798:	4b31      	ldr	r3, [pc, #196]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6892      	ldr	r2, [r2, #8]
 80027a8:	0211      	lsls	r1, r2, #8
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	68d2      	ldr	r2, [r2, #12]
 80027ae:	0912      	lsrs	r2, r2, #4
 80027b0:	0452      	lsls	r2, r2, #17
 80027b2:	430a      	orrs	r2, r1
 80027b4:	492a      	ldr	r1, [pc, #168]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	610b      	str	r3, [r1, #16]
 80027ba:	e027      	b.n	800280c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d112      	bne.n	80027e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027c2:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80027ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	0211      	lsls	r1, r2, #8
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6912      	ldr	r2, [r2, #16]
 80027d8:	0852      	lsrs	r2, r2, #1
 80027da:	3a01      	subs	r2, #1
 80027dc:	0552      	lsls	r2, r2, #21
 80027de:	430a      	orrs	r2, r1
 80027e0:	491f      	ldr	r1, [pc, #124]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	610b      	str	r3, [r1, #16]
 80027e6:	e011      	b.n	800280c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6892      	ldr	r2, [r2, #8]
 80027f8:	0211      	lsls	r1, r2, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6952      	ldr	r2, [r2, #20]
 80027fe:	0852      	lsrs	r2, r2, #1
 8002800:	3a01      	subs	r2, #1
 8002802:	0652      	lsls	r2, r2, #25
 8002804:	430a      	orrs	r2, r1
 8002806:	4916      	ldr	r1, [pc, #88]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002812:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fa6a 	bl	8000cf0 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800281e:	e009      	b.n	8002834 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002820:	f7fe fa66 	bl	8000cf0 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	73fb      	strb	r3, [r7, #15]
          break;
 8002832:	e005      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002834:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ef      	beq.n	8002820 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	691a      	ldr	r2, [r3, #16]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4904      	ldr	r1, [pc, #16]	@ (8002860 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002872:	4b6a      	ldr	r3, [pc, #424]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d018      	beq.n	80028b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800287e:	4b67      	ldr	r3, [pc, #412]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d10d      	bne.n	80028aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
       ||
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002896:	4b61      	ldr	r3, [pc, #388]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
       ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d047      	beq.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
 80028ae:	e044      	b.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d018      	beq.n	80028ea <RCCEx_PLLSAI2_Config+0x86>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d825      	bhi.n	8002908 <RCCEx_PLLSAI2_Config+0xa4>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d002      	beq.n	80028c6 <RCCEx_PLLSAI2_Config+0x62>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d009      	beq.n	80028d8 <RCCEx_PLLSAI2_Config+0x74>
 80028c4:	e020      	b.n	8002908 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c6:	4b55      	ldr	r3, [pc, #340]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11d      	bne.n	800290e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d6:	e01a      	b.n	800290e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d8:	4b50      	ldr	r3, [pc, #320]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d116      	bne.n	8002912 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e8:	e013      	b.n	8002912 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028ea:	4b4c      	ldr	r3, [pc, #304]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f6:	4b49      	ldr	r3, [pc, #292]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002906:	e006      	b.n	8002916 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e004      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800290e:	bf00      	nop
 8002910:	e002      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002916:	bf00      	nop
    }

    if(status == HAL_OK)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	430b      	orrs	r3, r1
 8002934:	4939      	ldr	r1, [pc, #228]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d167      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002940:	4b36      	ldr	r3, [pc, #216]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a35      	ldr	r2, [pc, #212]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002946:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800294a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7fe f9d0 	bl	8000cf0 <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002952:	e009      	b.n	8002968 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002954:	f7fe f9cc 	bl	8000cf0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	73fb      	strb	r3, [r7, #15]
        break;
 8002966:	e005      	b.n	8002974 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002968:	4b2c      	ldr	r3, [pc, #176]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ef      	bne.n	8002954 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d14a      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d111      	bne.n	80029a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002980:	4b26      	ldr	r3, [pc, #152]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68d2      	ldr	r2, [r2, #12]
 8002996:	0912      	lsrs	r2, r2, #4
 8002998:	0452      	lsls	r2, r2, #17
 800299a:	430a      	orrs	r2, r1
 800299c:	491f      	ldr	r1, [pc, #124]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	614b      	str	r3, [r1, #20]
 80029a2:	e011      	b.n	80029c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029a4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6912      	ldr	r2, [r2, #16]
 80029ba:	0852      	lsrs	r2, r2, #1
 80029bc:	3a01      	subs	r2, #1
 80029be:	0652      	lsls	r2, r2, #25
 80029c0:	430a      	orrs	r2, r1
 80029c2:	4916      	ldr	r1, [pc, #88]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029c8:	4b14      	ldr	r3, [pc, #80]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a13      	ldr	r2, [pc, #76]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7fe f98c 	bl	8000cf0 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029da:	e009      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029dc:	f7fe f988 	bl	8000cf0 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	73fb      	strb	r3, [r7, #15]
          break;
 80029ee:	e005      	b.n	80029fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	4904      	ldr	r1, [pc, #16]	@ (8002a1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e040      	b.n	8002ab4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd ffb0 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	@ 0x24
 8002a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fee6 	bl	8003838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fc2b 	bl	80032c8 <UART_SetConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d101      	bne.n	8002a7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e01b      	b.n	8002ab4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 ff65 	bl	800397c <UART_CheckIdleState>
 8002ab2:	4603      	mov	r3, r0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	603b      	str	r3, [r7, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d177      	bne.n	8002bc4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_UART_Transmit+0x24>
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e070      	b.n	8002bc6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2221      	movs	r2, #33	@ 0x21
 8002af0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002af2:	f7fe f8fd 	bl	8000cf0 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	88fa      	ldrh	r2, [r7, #6]
 8002afc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b10:	d108      	bne.n	8002b24 <HAL_UART_Transmit+0x68>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d104      	bne.n	8002b24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e003      	b.n	8002b2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b2c:	e02f      	b.n	8002b8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2180      	movs	r1, #128	@ 0x80
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 ffc7 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d004      	beq.n	8002b4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e03b      	b.n	8002bc6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	881a      	ldrh	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b60:	b292      	uxth	r2, r2
 8002b62:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	3302      	adds	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e007      	b.n	8002b7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1c9      	bne.n	8002b2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2140      	movs	r1, #64	@ 0x40
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 ff91 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e005      	b.n	8002bc6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	@ 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d137      	bne.n	8002c58 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_UART_Receive_IT+0x24>
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e030      	b.n	8002c5a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	@ (8002c64 <HAL_UART_Receive_IT+0x94>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d01f      	beq.n	8002c48 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d018      	beq.n	8002c48 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	e853 3f00 	ldrex	r3, [r3]
 8002c22:	613b      	str	r3, [r7, #16]
   return(result);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c38:	69f9      	ldr	r1, [r7, #28]
 8002c3a:	6a3a      	ldr	r2, [r7, #32]
 8002c3c:	e841 2300 	strex	r3, r2, [r1]
 8002c40:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e6      	bne.n	8002c16 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 ffaa 	bl	8003ba8 <UART_Start_Receive_IT>
 8002c54:	4603      	mov	r3, r0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3728      	adds	r7, #40	@ 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40008000 	.word	0x40008000

08002c68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b0ba      	sub	sp, #232	@ 0xe8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002c92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002c96:	4013      	ands	r3, r2
 8002c98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002c9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d115      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cb4:	f003 0320 	and.w	r3, r3, #32
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 82ca 	beq.w	800325a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
      }
      return;
 8002cce:	e2c4      	b.n	800325a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8117 	beq.w	8002f08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ce6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002cea:	4b85      	ldr	r3, [pc, #532]	@ (8002f00 <HAL_UART_IRQHandler+0x298>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 810a 	beq.w	8002f08 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d011      	beq.n	8002d24 <HAL_UART_IRQHandler+0xbc>
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d1a:	f043 0201 	orr.w	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d011      	beq.n	8002d54 <HAL_UART_IRQHandler+0xec>
 8002d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2202      	movs	r2, #2
 8002d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d4a:	f043 0204 	orr.w	r2, r3, #4
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d011      	beq.n	8002d84 <HAL_UART_IRQHandler+0x11c>
 8002d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00b      	beq.n	8002d84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2204      	movs	r2, #4
 8002d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d7a:	f043 0202 	orr.w	r2, r3, #2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d017      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002da0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2208      	movs	r2, #8
 8002dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db6:	f043 0208 	orr.w	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_UART_IRQHandler+0x18a>
 8002dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8230 	beq.w	800325e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0e:	f003 0320 	and.w	r3, r3, #32
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d007      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3a:	2b40      	cmp	r3, #64	@ 0x40
 8002e3c:	d005      	beq.n	8002e4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002e42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d04f      	beq.n	8002eea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 ff72 	bl	8003d34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b40      	cmp	r3, #64	@ 0x40
 8002e5c:	d141      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3308      	adds	r3, #8
 8002e64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3308      	adds	r3, #8
 8002e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002e9a:	e841 2300 	strex	r3, r2, [r1]
 8002e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1d9      	bne.n	8002e5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d013      	beq.n	8002eda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb6:	4a13      	ldr	r2, [pc, #76]	@ (8002f04 <HAL_UART_IRQHandler+0x29c>)
 8002eb8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe f871 	bl	8000fa6 <HAL_DMA_Abort_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d017      	beq.n	8002efa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed8:	e00f      	b.n	8002efa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f9de 	bl	800329c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee0:	e00b      	b.n	8002efa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f9da 	bl	800329c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	e007      	b.n	8002efa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f9d6 	bl	800329c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002ef8:	e1b1      	b.n	800325e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efa:	bf00      	nop
    return;
 8002efc:	e1af      	b.n	800325e <HAL_UART_IRQHandler+0x5f6>
 8002efe:	bf00      	nop
 8002f00:	04000120 	.word	0x04000120
 8002f04:	08003dfd 	.word	0x08003dfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	f040 816a 	bne.w	80031e6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8163 	beq.w	80031e6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 815c 	beq.w	80031e6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2210      	movs	r2, #16
 8002f34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f40:	2b40      	cmp	r3, #64	@ 0x40
 8002f42:	f040 80d4 	bne.w	80030ee <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80ad 	beq.w	80030b6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f66:	429a      	cmp	r2, r3
 8002f68:	f080 80a5 	bcs.w	80030b6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002f72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 8086 	bne.w	8003094 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002fbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1da      	bne.n	8002f88 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002fe2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
 8002fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ff6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002ffe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003008:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1e1      	bne.n	8002fd2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3308      	adds	r3, #8
 8003014:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003016:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003018:	e853 3f00 	ldrex	r3, [r3]
 800301c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800301e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3308      	adds	r3, #8
 800302e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003032:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003034:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003038:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800303a:	e841 2300 	strex	r3, r2, [r1]
 800303e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1e3      	bne.n	800300e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2220      	movs	r2, #32
 800304a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003064:	f023 0310 	bic.w	r3, r3, #16
 8003068:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003076:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003078:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800307c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e4      	bne.n	8003054 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd ff4b 	bl	8000f2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8fe 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80030b4:	e0d5      	b.n	8003262 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80030bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030c0:	429a      	cmp	r2, r3
 80030c2:	f040 80ce 	bne.w	8003262 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 80c5 	bne.w	8003262 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8e2 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
      return;
 80030ec:	e0b9      	b.n	8003262 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80ab 	beq.w	8003266 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a6 	beq.w	8003266 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003122:	e853 3f00 	ldrex	r3, [r3]
 8003126:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800312e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800313c:	647b      	str	r3, [r7, #68]	@ 0x44
 800313e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800314a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e4      	bne.n	800311a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3308      	adds	r3, #8
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	623b      	str	r3, [r7, #32]
   return(result);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3308      	adds	r3, #8
 8003170:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003174:	633a      	str	r2, [r7, #48]	@ 0x30
 8003176:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003178:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800317a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317c:	e841 2300 	strex	r3, r2, [r1]
 8003180:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1e3      	bne.n	8003150 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f023 0310 	bic.w	r3, r3, #16
 80031b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	69b9      	ldr	r1, [r7, #24]
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	617b      	str	r3, [r7, #20]
   return(result);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1e4      	bne.n	800319c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f866 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031e4:	e03f      	b.n	8003266 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00e      	beq.n	8003210 <HAL_UART_IRQHandler+0x5a8>
 80031f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d008      	beq.n	8003210 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003206:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fff3 	bl	80041f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800320e:	e02d      	b.n	800326c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800321c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01c      	beq.n	800326a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
    }
    return;
 8003238:	e017      	b.n	800326a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800323e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <HAL_UART_IRQHandler+0x604>
 8003246:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800324a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00c      	beq.n	800326c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fde8 	bl	8003e28 <UART_EndTransmit_IT>
    return;
 8003258:	e008      	b.n	800326c <HAL_UART_IRQHandler+0x604>
      return;
 800325a:	bf00      	nop
 800325c:	e006      	b.n	800326c <HAL_UART_IRQHandler+0x604>
    return;
 800325e:	bf00      	nop
 8003260:	e004      	b.n	800326c <HAL_UART_IRQHandler+0x604>
      return;
 8003262:	bf00      	nop
 8003264:	e002      	b.n	800326c <HAL_UART_IRQHandler+0x604>
      return;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <HAL_UART_IRQHandler+0x604>
    return;
 800326a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800326c:	37e8      	adds	r7, #232	@ 0xe8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop

08003274 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b08a      	sub	sp, #40	@ 0x28
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4ba4      	ldr	r3, [pc, #656]	@ (8003588 <UART_SetConfig+0x2c0>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003300:	430b      	orrs	r3, r1
 8003302:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a99      	ldr	r2, [pc, #612]	@ (800358c <UART_SetConfig+0x2c4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003330:	4313      	orrs	r3, r2
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003344:	430a      	orrs	r2, r1
 8003346:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a90      	ldr	r2, [pc, #576]	@ (8003590 <UART_SetConfig+0x2c8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d126      	bne.n	80033a0 <UART_SetConfig+0xd8>
 8003352:	4b90      	ldr	r3, [pc, #576]	@ (8003594 <UART_SetConfig+0x2cc>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d81b      	bhi.n	8003398 <UART_SetConfig+0xd0>
 8003360:	a201      	add	r2, pc, #4	@ (adr r2, 8003368 <UART_SetConfig+0xa0>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	08003379 	.word	0x08003379
 800336c:	08003389 	.word	0x08003389
 8003370:	08003381 	.word	0x08003381
 8003374:	08003391 	.word	0x08003391
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800337e:	e116      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003380:	2302      	movs	r3, #2
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003386:	e112      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003388:	2304      	movs	r3, #4
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800338e:	e10e      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003390:	2308      	movs	r3, #8
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003396:	e10a      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003398:	2310      	movs	r3, #16
 800339a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800339e:	e106      	b.n	80035ae <UART_SetConfig+0x2e6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003598 <UART_SetConfig+0x2d0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d138      	bne.n	800341c <UART_SetConfig+0x154>
 80033aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003594 <UART_SetConfig+0x2cc>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d82d      	bhi.n	8003414 <UART_SetConfig+0x14c>
 80033b8:	a201      	add	r2, pc, #4	@ (adr r2, 80033c0 <UART_SetConfig+0xf8>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	08003415 	.word	0x08003415
 80033c8:	08003415 	.word	0x08003415
 80033cc:	08003415 	.word	0x08003415
 80033d0:	08003405 	.word	0x08003405
 80033d4:	08003415 	.word	0x08003415
 80033d8:	08003415 	.word	0x08003415
 80033dc:	08003415 	.word	0x08003415
 80033e0:	080033fd 	.word	0x080033fd
 80033e4:	08003415 	.word	0x08003415
 80033e8:	08003415 	.word	0x08003415
 80033ec:	08003415 	.word	0x08003415
 80033f0:	0800340d 	.word	0x0800340d
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033fa:	e0d8      	b.n	80035ae <UART_SetConfig+0x2e6>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003402:	e0d4      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800340a:	e0d0      	b.n	80035ae <UART_SetConfig+0x2e6>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003412:	e0cc      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341a:	e0c8      	b.n	80035ae <UART_SetConfig+0x2e6>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a5e      	ldr	r2, [pc, #376]	@ (800359c <UART_SetConfig+0x2d4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d125      	bne.n	8003472 <UART_SetConfig+0x1aa>
 8003426:	4b5b      	ldr	r3, [pc, #364]	@ (8003594 <UART_SetConfig+0x2cc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003430:	2b30      	cmp	r3, #48	@ 0x30
 8003432:	d016      	beq.n	8003462 <UART_SetConfig+0x19a>
 8003434:	2b30      	cmp	r3, #48	@ 0x30
 8003436:	d818      	bhi.n	800346a <UART_SetConfig+0x1a2>
 8003438:	2b20      	cmp	r3, #32
 800343a:	d00a      	beq.n	8003452 <UART_SetConfig+0x18a>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d814      	bhi.n	800346a <UART_SetConfig+0x1a2>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <UART_SetConfig+0x182>
 8003444:	2b10      	cmp	r3, #16
 8003446:	d008      	beq.n	800345a <UART_SetConfig+0x192>
 8003448:	e00f      	b.n	800346a <UART_SetConfig+0x1a2>
 800344a:	2300      	movs	r3, #0
 800344c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003450:	e0ad      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003452:	2302      	movs	r3, #2
 8003454:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003458:	e0a9      	b.n	80035ae <UART_SetConfig+0x2e6>
 800345a:	2304      	movs	r3, #4
 800345c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003460:	e0a5      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003462:	2308      	movs	r3, #8
 8003464:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003468:	e0a1      	b.n	80035ae <UART_SetConfig+0x2e6>
 800346a:	2310      	movs	r3, #16
 800346c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003470:	e09d      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4a      	ldr	r2, [pc, #296]	@ (80035a0 <UART_SetConfig+0x2d8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d125      	bne.n	80034c8 <UART_SetConfig+0x200>
 800347c:	4b45      	ldr	r3, [pc, #276]	@ (8003594 <UART_SetConfig+0x2cc>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003482:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003486:	2bc0      	cmp	r3, #192	@ 0xc0
 8003488:	d016      	beq.n	80034b8 <UART_SetConfig+0x1f0>
 800348a:	2bc0      	cmp	r3, #192	@ 0xc0
 800348c:	d818      	bhi.n	80034c0 <UART_SetConfig+0x1f8>
 800348e:	2b80      	cmp	r3, #128	@ 0x80
 8003490:	d00a      	beq.n	80034a8 <UART_SetConfig+0x1e0>
 8003492:	2b80      	cmp	r3, #128	@ 0x80
 8003494:	d814      	bhi.n	80034c0 <UART_SetConfig+0x1f8>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <UART_SetConfig+0x1d8>
 800349a:	2b40      	cmp	r3, #64	@ 0x40
 800349c:	d008      	beq.n	80034b0 <UART_SetConfig+0x1e8>
 800349e:	e00f      	b.n	80034c0 <UART_SetConfig+0x1f8>
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034a6:	e082      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034a8:	2302      	movs	r3, #2
 80034aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ae:	e07e      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034b0:	2304      	movs	r3, #4
 80034b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034b6:	e07a      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034b8:	2308      	movs	r3, #8
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034be:	e076      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034c0:	2310      	movs	r3, #16
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c6:	e072      	b.n	80035ae <UART_SetConfig+0x2e6>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a35      	ldr	r2, [pc, #212]	@ (80035a4 <UART_SetConfig+0x2dc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d12a      	bne.n	8003528 <UART_SetConfig+0x260>
 80034d2:	4b30      	ldr	r3, [pc, #192]	@ (8003594 <UART_SetConfig+0x2cc>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034e0:	d01a      	beq.n	8003518 <UART_SetConfig+0x250>
 80034e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80034e6:	d81b      	bhi.n	8003520 <UART_SetConfig+0x258>
 80034e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034ec:	d00c      	beq.n	8003508 <UART_SetConfig+0x240>
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034f2:	d815      	bhi.n	8003520 <UART_SetConfig+0x258>
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <UART_SetConfig+0x238>
 80034f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fc:	d008      	beq.n	8003510 <UART_SetConfig+0x248>
 80034fe:	e00f      	b.n	8003520 <UART_SetConfig+0x258>
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003506:	e052      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003508:	2302      	movs	r3, #2
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800350e:	e04e      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003510:	2304      	movs	r3, #4
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003516:	e04a      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003518:	2308      	movs	r3, #8
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800351e:	e046      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003520:	2310      	movs	r3, #16
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003526:	e042      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a17      	ldr	r2, [pc, #92]	@ (800358c <UART_SetConfig+0x2c4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d13a      	bne.n	80035a8 <UART_SetConfig+0x2e0>
 8003532:	4b18      	ldr	r3, [pc, #96]	@ (8003594 <UART_SetConfig+0x2cc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800353c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003540:	d01a      	beq.n	8003578 <UART_SetConfig+0x2b0>
 8003542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003546:	d81b      	bhi.n	8003580 <UART_SetConfig+0x2b8>
 8003548:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800354c:	d00c      	beq.n	8003568 <UART_SetConfig+0x2a0>
 800354e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003552:	d815      	bhi.n	8003580 <UART_SetConfig+0x2b8>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <UART_SetConfig+0x298>
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800355c:	d008      	beq.n	8003570 <UART_SetConfig+0x2a8>
 800355e:	e00f      	b.n	8003580 <UART_SetConfig+0x2b8>
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003566:	e022      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003568:	2302      	movs	r3, #2
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800356e:	e01e      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003570:	2304      	movs	r3, #4
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003576:	e01a      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003578:	2308      	movs	r3, #8
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800357e:	e016      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003580:	2310      	movs	r3, #16
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003586:	e012      	b.n	80035ae <UART_SetConfig+0x2e6>
 8003588:	efff69f3 	.word	0xefff69f3
 800358c:	40008000 	.word	0x40008000
 8003590:	40013800 	.word	0x40013800
 8003594:	40021000 	.word	0x40021000
 8003598:	40004400 	.word	0x40004400
 800359c:	40004800 	.word	0x40004800
 80035a0:	40004c00 	.word	0x40004c00
 80035a4:	40005000 	.word	0x40005000
 80035a8:	2310      	movs	r3, #16
 80035aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a9f      	ldr	r2, [pc, #636]	@ (8003830 <UART_SetConfig+0x568>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d17a      	bne.n	80036ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d824      	bhi.n	800360a <UART_SetConfig+0x342>
 80035c0:	a201      	add	r2, pc, #4	@ (adr r2, 80035c8 <UART_SetConfig+0x300>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	0800360b 	.word	0x0800360b
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	0800360b 	.word	0x0800360b
 80035d8:	080035fb 	.word	0x080035fb
 80035dc:	0800360b 	.word	0x0800360b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800360b 	.word	0x0800360b
 80035e8:	08003603 	.word	0x08003603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7fe fcd0 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 80035f0:	61f8      	str	r0, [r7, #28]
        break;
 80035f2:	e010      	b.n	8003616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f4:	4b8f      	ldr	r3, [pc, #572]	@ (8003834 <UART_SetConfig+0x56c>)
 80035f6:	61fb      	str	r3, [r7, #28]
        break;
 80035f8:	e00d      	b.n	8003616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7fe fc31 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80035fe:	61f8      	str	r0, [r7, #28]
        break;
 8003600:	e009      	b.n	8003616 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003606:	61fb      	str	r3, [r7, #28]
        break;
 8003608:	e005      	b.n	8003616 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80fb 	beq.w	8003814 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	429a      	cmp	r2, r3
 800362c:	d305      	bcc.n	800363a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	429a      	cmp	r2, r3
 8003638:	d903      	bls.n	8003642 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003640:	e0e8      	b.n	8003814 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	2200      	movs	r2, #0
 8003646:	461c      	mov	r4, r3
 8003648:	4615      	mov	r5, r2
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	022b      	lsls	r3, r5, #8
 8003654:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003658:	0222      	lsls	r2, r4, #8
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	6849      	ldr	r1, [r1, #4]
 800365e:	0849      	lsrs	r1, r1, #1
 8003660:	2000      	movs	r0, #0
 8003662:	4688      	mov	r8, r1
 8003664:	4681      	mov	r9, r0
 8003666:	eb12 0a08 	adds.w	sl, r2, r8
 800366a:	eb43 0b09 	adc.w	fp, r3, r9
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800367c:	4650      	mov	r0, sl
 800367e:	4659      	mov	r1, fp
 8003680:	f7fc fdfe 	bl	8000280 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003692:	d308      	bcc.n	80036a6 <UART_SetConfig+0x3de>
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800369a:	d204      	bcs.n	80036a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	60da      	str	r2, [r3, #12]
 80036a4:	e0b6      	b.n	8003814 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036ac:	e0b2      	b.n	8003814 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036b6:	d15e      	bne.n	8003776 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80036b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d828      	bhi.n	8003712 <UART_SetConfig+0x44a>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <UART_SetConfig+0x400>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036ed 	.word	0x080036ed
 80036cc:	080036f5 	.word	0x080036f5
 80036d0:	080036fd 	.word	0x080036fd
 80036d4:	08003713 	.word	0x08003713
 80036d8:	08003703 	.word	0x08003703
 80036dc:	08003713 	.word	0x08003713
 80036e0:	08003713 	.word	0x08003713
 80036e4:	08003713 	.word	0x08003713
 80036e8:	0800370b 	.word	0x0800370b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036ec:	f7fe fc50 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 80036f0:	61f8      	str	r0, [r7, #28]
        break;
 80036f2:	e014      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036f4:	f7fe fc62 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 80036f8:	61f8      	str	r0, [r7, #28]
        break;
 80036fa:	e010      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003834 <UART_SetConfig+0x56c>)
 80036fe:	61fb      	str	r3, [r7, #28]
        break;
 8003700:	e00d      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003702:	f7fe fbad 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8003706:	61f8      	str	r0, [r7, #28]
        break;
 8003708:	e009      	b.n	800371e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370e:	61fb      	str	r3, [r7, #28]
        break;
 8003710:	e005      	b.n	800371e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800371c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d077      	beq.n	8003814 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005a      	lsls	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	441a      	add	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	fbb2 f3f3 	udiv	r3, r2, r3
 8003738:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d916      	bls.n	800376e <UART_SetConfig+0x4a6>
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003746:	d212      	bcs.n	800376e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	b29b      	uxth	r3, r3
 800374c:	f023 030f 	bic.w	r3, r3, #15
 8003750:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	b29b      	uxth	r3, r3
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	b29a      	uxth	r2, r3
 800375e:	8afb      	ldrh	r3, [r7, #22]
 8003760:	4313      	orrs	r3, r2
 8003762:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	8afa      	ldrh	r2, [r7, #22]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	e052      	b.n	8003814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003774:	e04e      	b.n	8003814 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003776:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800377a:	2b08      	cmp	r3, #8
 800377c:	d827      	bhi.n	80037ce <UART_SetConfig+0x506>
 800377e:	a201      	add	r2, pc, #4	@ (adr r2, 8003784 <UART_SetConfig+0x4bc>)
 8003780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003784:	080037a9 	.word	0x080037a9
 8003788:	080037b1 	.word	0x080037b1
 800378c:	080037b9 	.word	0x080037b9
 8003790:	080037cf 	.word	0x080037cf
 8003794:	080037bf 	.word	0x080037bf
 8003798:	080037cf 	.word	0x080037cf
 800379c:	080037cf 	.word	0x080037cf
 80037a0:	080037cf 	.word	0x080037cf
 80037a4:	080037c7 	.word	0x080037c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7fe fbf2 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 80037ac:	61f8      	str	r0, [r7, #28]
        break;
 80037ae:	e014      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037b0:	f7fe fc04 	bl	8001fbc <HAL_RCC_GetPCLK2Freq>
 80037b4:	61f8      	str	r0, [r7, #28]
        break;
 80037b6:	e010      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <UART_SetConfig+0x56c>)
 80037ba:	61fb      	str	r3, [r7, #28]
        break;
 80037bc:	e00d      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037be:	f7fe fb4f 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80037c2:	61f8      	str	r0, [r7, #28]
        break;
 80037c4:	e009      	b.n	80037da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ca:	61fb      	str	r3, [r7, #28]
        break;
 80037cc:	e005      	b.n	80037da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037d8:	bf00      	nop
    }

    if (pclk != 0U)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d019      	beq.n	8003814 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	085a      	lsrs	r2, r3, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	441a      	add	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0f      	cmp	r3, #15
 80037f8:	d909      	bls.n	800380e <UART_SetConfig+0x546>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d205      	bcs.n	800380e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	e002      	b.n	8003814 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003820:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003824:	4618      	mov	r0, r3
 8003826:	3728      	adds	r7, #40	@ 0x28
 8003828:	46bd      	mov	sp, r7
 800382a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382e:	bf00      	nop
 8003830:	40008000 	.word	0x40008000
 8003834:	00f42400 	.word	0x00f42400

08003838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01a      	beq.n	800394e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003936:	d10a      	bne.n	800394e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b098      	sub	sp, #96	@ 0x60
 8003980:	af02      	add	r7, sp, #8
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800398c:	f7fd f9b0 	bl	8000cf0 <HAL_GetTick>
 8003990:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d12e      	bne.n	80039fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a8:	2200      	movs	r2, #0
 80039aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f88c 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d021      	beq.n	80039fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e6      	bne.n	80039ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e062      	b.n	8003ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d149      	bne.n	8003aa0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a14:	2200      	movs	r2, #0
 8003a16:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f856 	bl	8003acc <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d03c      	beq.n	8003aa0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	623b      	str	r3, [r7, #32]
   return(result);
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	461a      	mov	r2, r3
 8003a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a44:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e6      	bne.n	8003a26 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3308      	adds	r3, #8
 8003a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a78:	61fa      	str	r2, [r7, #28]
 8003a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	69b9      	ldr	r1, [r7, #24]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	617b      	str	r3, [r7, #20]
   return(result);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e5      	bne.n	8003a58 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e011      	b.n	8003ac4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3758      	adds	r7, #88	@ 0x58
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003adc:	e04f      	b.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d04b      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	f7fd f903 	bl	8000cf0 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <UART_WaitOnFlagUntilTimeout+0x30>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e04e      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d037      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b80      	cmp	r3, #128	@ 0x80
 8003b12:	d034      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d031      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d110      	bne.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f8ff 	bl	8003d34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e029      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b58:	d111      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f8e5 	bl	8003d34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00f      	b.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69da      	ldr	r2, [r3, #28]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d0a0      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b097      	sub	sp, #92	@ 0x5c
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bda:	d10e      	bne.n	8003bfa <UART_Start_Receive_IT+0x52>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <UART_Start_Receive_IT+0x48>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003bea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bee:	e02d      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	22ff      	movs	r2, #255	@ 0xff
 8003bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003bf8:	e028      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10d      	bne.n	8003c1e <UART_Start_Receive_IT+0x76>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d104      	bne.n	8003c14 <UART_Start_Receive_IT+0x6c>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	22ff      	movs	r2, #255	@ 0xff
 8003c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c12:	e01b      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	227f      	movs	r2, #127	@ 0x7f
 8003c18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c1c:	e016      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c26:	d10d      	bne.n	8003c44 <UART_Start_Receive_IT+0x9c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <UART_Start_Receive_IT+0x92>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	227f      	movs	r2, #127	@ 0x7f
 8003c34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c38:	e008      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	223f      	movs	r2, #63	@ 0x3f
 8003c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c42:	e003      	b.n	8003c4c <UART_Start_Receive_IT+0xa4>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2222      	movs	r2, #34	@ 0x22
 8003c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c7c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003c7e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003c82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003c8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e5      	bne.n	8003c5c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c98:	d107      	bne.n	8003caa <UART_Start_Receive_IT+0x102>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <UART_Start_Receive_IT+0x184>)
 8003ca6:	669a      	str	r2, [r3, #104]	@ 0x68
 8003ca8:	e002      	b.n	8003cb0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4a20      	ldr	r2, [pc, #128]	@ (8003d30 <UART_Start_Receive_IT+0x188>)
 8003cae:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d019      	beq.n	8003cec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cd8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_Start_Receive_IT+0x110>
 8003cea:	e018      	b.n	8003d1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f043 0320 	orr.w	r3, r3, #32
 8003d00:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	69f9      	ldr	r1, [r7, #28]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e6      	bne.n	8003cec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	375c      	adds	r7, #92	@ 0x5c
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	08004039 	.word	0x08004039
 8003d30:	08003e7d 	.word	0x08003e7d

08003d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b095      	sub	sp, #84	@ 0x54
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d118      	bne.n	8003ddc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e6      	bne.n	8003daa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003df0:	bf00      	nop
 8003df2:	3754      	adds	r7, #84	@ 0x54
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f7ff fa3e 	bl	800329c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6979      	ldr	r1, [r7, #20]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e6      	bne.n	8003e30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fa00 	bl	8003274 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e74:	bf00      	nop
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b09c      	sub	sp, #112	@ 0x70
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e94:	2b22      	cmp	r3, #34	@ 0x22
 8003e96:	f040 80be 	bne.w	8004016 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003ea0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003ea8:	b2d9      	uxtb	r1, r3
 8003eaa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f040 80a3 	bne.w	800402a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ef4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e6      	bne.n	8003ee4 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f36:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f38:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e5      	bne.n	8003f16 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a34      	ldr	r2, [pc, #208]	@ (8004034 <UART_RxISR_8BIT+0x1b8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d01f      	beq.n	8003fa8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d018      	beq.n	8003fa8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	623b      	str	r3, [r7, #32]
   return(result);
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d12e      	bne.n	800400e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0310 	bic.w	r3, r3, #16
 8003fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	69b9      	ldr	r1, [r7, #24]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d103      	bne.n	8003ffe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff f952 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800400c:	e00d      	b.n	800402a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff f93a 	bl	8003288 <HAL_UART_RxCpltCallback>
}
 8004014:	e009      	b.n	800402a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	8b1b      	ldrh	r3, [r3, #24]
 800401c:	b29a      	uxth	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0208 	orr.w	r2, r2, #8
 8004026:	b292      	uxth	r2, r2
 8004028:	831a      	strh	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	3770      	adds	r7, #112	@ 0x70
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40008000 	.word	0x40008000

08004038 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b09c      	sub	sp, #112	@ 0x70
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004046:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004050:	2b22      	cmp	r3, #34	@ 0x22
 8004052:	f040 80be 	bne.w	80041d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800405c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004064:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004066:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800406a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800406e:	4013      	ands	r3, r2
 8004070:	b29a      	uxth	r2, r3
 8004072:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004074:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	1c9a      	adds	r2, r3, #2
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 80a3 	bne.w	80041e6 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80040ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040be:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80040c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80040cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e6      	bne.n	80040a0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80040f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e5      	bne.n	80040d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a34      	ldr	r2, [pc, #208]	@ (80041f0 <UART_RxISR_16BIT+0x1b8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01f      	beq.n	8004164 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004152:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004156:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	2b01      	cmp	r3, #1
 800416a:	d12e      	bne.n	80041ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6979      	ldr	r1, [r7, #20]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	613b      	str	r3, [r7, #16]
   return(result);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d103      	bne.n	80041ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2210      	movs	r2, #16
 80041b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff f874 	bl	80032b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041c8:	e00d      	b.n	80041e6 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff f85c 	bl	8003288 <HAL_UART_RxCpltCallback>
}
 80041d0:	e009      	b.n	80041e6 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	8b1b      	ldrh	r3, [r3, #24]
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	b292      	uxth	r2, r2
 80041e4:	831a      	strh	r2, [r3, #24]
}
 80041e6:	bf00      	nop
 80041e8:	3770      	adds	r7, #112	@ 0x70
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40008000 	.word	0x40008000

080041f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <__NVIC_SetPriority>:
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	6039      	str	r1, [r7, #0]
 8004212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004218:	2b00      	cmp	r3, #0
 800421a:	db0a      	blt.n	8004232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2da      	uxtb	r2, r3
 8004220:	490c      	ldr	r1, [pc, #48]	@ (8004254 <__NVIC_SetPriority+0x4c>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	0112      	lsls	r2, r2, #4
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	440b      	add	r3, r1
 800422c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004230:	e00a      	b.n	8004248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	4908      	ldr	r1, [pc, #32]	@ (8004258 <__NVIC_SetPriority+0x50>)
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	3b04      	subs	r3, #4
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	b2d2      	uxtb	r2, r2
 8004244:	440b      	add	r3, r1
 8004246:	761a      	strb	r2, [r3, #24]
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000e100 	.word	0xe000e100
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004260:	2100      	movs	r1, #0
 8004262:	f06f 0004 	mvn.w	r0, #4
 8004266:	f7ff ffcf 	bl	8004208 <__NVIC_SetPriority>
#endif
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004276:	f3ef 8305 	mrs	r3, IPSR
 800427a:	603b      	str	r3, [r7, #0]
  return(result);
 800427c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004282:	f06f 0305 	mvn.w	r3, #5
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	e00c      	b.n	80042a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800428a:	4b0a      	ldr	r3, [pc, #40]	@ (80042b4 <osKernelInitialize+0x44>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d105      	bne.n	800429e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004292:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <osKernelInitialize+0x44>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004298:	2300      	movs	r3, #0
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	e002      	b.n	80042a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
 80042a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042a4:	687b      	ldr	r3, [r7, #4]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	2000011c 	.word	0x2000011c

080042b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042be:	f3ef 8305 	mrs	r3, IPSR
 80042c2:	603b      	str	r3, [r7, #0]
  return(result);
 80042c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80042ca:	f06f 0305 	mvn.w	r3, #5
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	e010      	b.n	80042f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <osKernelStart+0x48>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d109      	bne.n	80042ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042da:	f7ff ffbf 	bl	800425c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042de:	4b08      	ldr	r3, [pc, #32]	@ (8004300 <osKernelStart+0x48>)
 80042e0:	2202      	movs	r2, #2
 80042e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042e4:	f001 f8b6 	bl	8005454 <vTaskStartScheduler>
      stat = osOK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e002      	b.n	80042f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042f4:	687b      	ldr	r3, [r7, #4]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	2000011c 	.word	0x2000011c

08004304 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b08e      	sub	sp, #56	@ 0x38
 8004308:	af04      	add	r7, sp, #16
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004314:	f3ef 8305 	mrs	r3, IPSR
 8004318:	617b      	str	r3, [r7, #20]
  return(result);
 800431a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800431c:	2b00      	cmp	r3, #0
 800431e:	d17e      	bne.n	800441e <osThreadNew+0x11a>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d07b      	beq.n	800441e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800432a:	2318      	movs	r3, #24
 800432c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d045      	beq.n	80043ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <osThreadNew+0x48>
        name = attr->name;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <osThreadNew+0x6e>
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b38      	cmp	r3, #56	@ 0x38
 8004364:	d805      	bhi.n	8004372 <osThreadNew+0x6e>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <osThreadNew+0x72>
        return (NULL);
 8004372:	2300      	movs	r3, #0
 8004374:	e054      	b.n	8004420 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	089b      	lsrs	r3, r3, #2
 8004384:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <osThreadNew+0xa8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b5b      	cmp	r3, #91	@ 0x5b
 8004394:	d90a      	bls.n	80043ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800439a:	2b00      	cmp	r3, #0
 800439c:	d006      	beq.n	80043ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <osThreadNew+0xa8>
        mem = 1;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	e010      	b.n	80043ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10c      	bne.n	80043ce <osThreadNew+0xca>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <osThreadNew+0xca>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d104      	bne.n	80043ce <osThreadNew+0xca>
          mem = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e001      	b.n	80043ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d110      	bne.n	80043f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043dc:	9202      	str	r2, [sp, #8]
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	6a3a      	ldr	r2, [r7, #32]
 80043e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fe56 	bl	800509c <xTaskCreateStatic>
 80043f0:	4603      	mov	r3, r0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	e013      	b.n	800441e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d110      	bne.n	800441e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	f107 0310 	add.w	r3, r7, #16
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fea4 	bl	800515c <xTaskCreate>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d001      	beq.n	800441e <osThreadNew+0x11a>
            hTask = NULL;
 800441a:	2300      	movs	r3, #0
 800441c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800441e:	693b      	ldr	r3, [r7, #16]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3728      	adds	r7, #40	@ 0x28
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004430:	f3ef 8305 	mrs	r3, IPSR
 8004434:	60bb      	str	r3, [r7, #8]
  return(result);
 8004436:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <osDelay+0x1c>
    stat = osErrorISR;
 800443c:	f06f 0305 	mvn.w	r3, #5
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e007      	b.n	8004454 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <osDelay+0x2c>
      vTaskDelay(ticks);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 ffca 	bl	80053e8 <vTaskDelay>
    }
  }

  return (stat);
 8004454:	68fb      	ldr	r3, [r7, #12]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a07      	ldr	r2, [pc, #28]	@ (800448c <vApplicationGetIdleTaskMemory+0x2c>)
 8004470:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4a06      	ldr	r2, [pc, #24]	@ (8004490 <vApplicationGetIdleTaskMemory+0x30>)
 8004476:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2280      	movs	r2, #128	@ 0x80
 800447c:	601a      	str	r2, [r3, #0]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000120 	.word	0x20000120
 8004490:	2000017c 	.word	0x2000017c

08004494 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a07      	ldr	r2, [pc, #28]	@ (80044c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80044a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4a06      	ldr	r2, [pc, #24]	@ (80044c4 <vApplicationGetTimerTaskMemory+0x30>)
 80044aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	2000037c 	.word	0x2000037c
 80044c4:	200003d8 	.word	0x200003d8

080044c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f103 0208 	add.w	r2, r3, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f04f 32ff 	mov.w	r2, #4294967295
 80044e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f103 0208 	add.w	r2, r3, #8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f103 0208 	add.w	r2, r3, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004522:	b480      	push	{r7}
 8004524:	b085      	sub	sp, #20
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800456a:	b480      	push	{r7}
 800456c:	b085      	sub	sp, #20
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d103      	bne.n	800458a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e00c      	b.n	80045a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3308      	adds	r3, #8
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e002      	b.n	8004598 <vListInsert+0x2e>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d2f6      	bcs.n	8004592 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6892      	ldr	r2, [r2, #8]
 80045f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6852      	ldr	r2, [r2, #4]
 80045fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d103      	bne.n	8004610 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1e5a      	subs	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	e7fd      	b.n	8004658 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800465c:	f002 f8b4 	bl	80067c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	441a      	add	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468c:	3b01      	subs	r3, #1
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	441a      	add	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	22ff      	movs	r2, #255	@ 0xff
 80046a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	22ff      	movs	r2, #255	@ 0xff
 80046a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d114      	bne.n	80046dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d01a      	beq.n	80046f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3310      	adds	r3, #16
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 f956 	bl	8005970 <xTaskRemoveFromEventList>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d012      	beq.n	80046f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <xQueueGenericReset+0xd0>)
 80046cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	e009      	b.n	80046f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3310      	adds	r3, #16
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fef1 	bl	80044c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3324      	adds	r3, #36	@ 0x24
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff feec 	bl	80044c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046f0:	f002 f89c 	bl	800682c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046f4:	2301      	movs	r3, #1
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08e      	sub	sp, #56	@ 0x38
 8004708:	af02      	add	r7, sp, #8
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <xQueueGenericCreateStatic+0x56>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <xQueueGenericCreateStatic+0x5a>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericCreateStatic+0x5c>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	623b      	str	r3, [r7, #32]
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <xQueueGenericCreateStatic+0x84>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <xQueueGenericCreateStatic+0x88>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <xQueueGenericCreateStatic+0x8a>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10b      	bne.n	80047aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	61fb      	str	r3, [r7, #28]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80047aa:	2350      	movs	r3, #80	@ 0x50
 80047ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	2b50      	cmp	r3, #80	@ 0x50
 80047b2:	d00b      	beq.n	80047cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	61bb      	str	r3, [r7, #24]
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	e7fd      	b.n	80047c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00d      	beq.n	80047f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80047e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f840 	bl	8004874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3730      	adds	r7, #48	@ 0x30
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08a      	sub	sp, #40	@ 0x28
 8004802:	af02      	add	r7, sp, #8
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004816:	f383 8811 	msr	BASEPRI, r3
 800481a:	f3bf 8f6f 	isb	sy
 800481e:	f3bf 8f4f 	dsb	sy
 8004822:	613b      	str	r3, [r7, #16]
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	e7fd      	b.n	8004826 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	3350      	adds	r3, #80	@ 0x50
 8004838:	4618      	mov	r0, r3
 800483a:	f002 f8e7 	bl	8006a0c <pvPortMalloc>
 800483e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3350      	adds	r3, #80	@ 0x50
 800484e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004858:	79fa      	ldrb	r2, [r7, #7]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	4613      	mov	r3, r2
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f805 	bl	8004874 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800486a:	69bb      	ldr	r3, [r7, #24]
	}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e002      	b.n	8004896 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048a2:	2101      	movs	r1, #1
 80048a4:	69b8      	ldr	r0, [r7, #24]
 80048a6:	f7ff fec3 	bl	8004630 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80048b2:	bf00      	nop
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08e      	sub	sp, #56	@ 0x38
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ca:	2300      	movs	r3, #0
 80048cc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <xQueueGenericSend+0x34>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d103      	bne.n	80048fe <xQueueGenericSend+0x42>
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <xQueueGenericSend+0x46>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <xQueueGenericSend+0x48>
 8004902:	2300      	movs	r3, #0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <xQueueGenericSend+0x64>
	__asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d103      	bne.n	800492e <xQueueGenericSend+0x72>
 8004926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <xQueueGenericSend+0x76>
 800492e:	2301      	movs	r3, #1
 8004930:	e000      	b.n	8004934 <xQueueGenericSend+0x78>
 8004932:	2300      	movs	r3, #0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10b      	bne.n	8004950 <xQueueGenericSend+0x94>
	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	623b      	str	r3, [r7, #32]
}
 800494a:	bf00      	nop
 800494c:	bf00      	nop
 800494e:	e7fd      	b.n	800494c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004950:	f001 f9ce 	bl	8005cf0 <xTaskGetSchedulerState>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <xQueueGenericSend+0xa4>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <xQueueGenericSend+0xa8>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <xQueueGenericSend+0xaa>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <xQueueGenericSend+0xc6>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	61fb      	str	r3, [r7, #28]
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	e7fd      	b.n	800497e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004982:	f001 ff21 	bl	80067c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004988:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498e:	429a      	cmp	r2, r3
 8004990:	d302      	bcc.n	8004998 <xQueueGenericSend+0xdc>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d129      	bne.n	80049ec <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800499e:	f000 fa0f 	bl	8004dc0 <prvCopyDataToQueue>
 80049a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ae:	3324      	adds	r3, #36	@ 0x24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 ffdd 	bl	8005970 <xTaskRemoveFromEventList>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d013      	beq.n	80049e4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80049bc:	4b3f      	ldr	r3, [pc, #252]	@ (8004abc <xQueueGenericSend+0x200>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	e00a      	b.n	80049e4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049d4:	4b39      	ldr	r3, [pc, #228]	@ (8004abc <xQueueGenericSend+0x200>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049e4:	f001 ff22 	bl	800682c <vPortExitCritical>
				return pdPASS;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e063      	b.n	8004ab4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049f2:	f001 ff1b 	bl	800682c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	e05c      	b.n	8004ab4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a00:	f107 0314 	add.w	r3, r7, #20
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f817 	bl	8005a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a0e:	f001 ff0d 	bl	800682c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a12:	f000 fd87 	bl	8005524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a16:	f001 fed7 	bl	80067c8 <vPortEnterCritical>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a20:	b25b      	sxtb	r3, r3
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d103      	bne.n	8004a30 <xQueueGenericSend+0x174>
 8004a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a36:	b25b      	sxtb	r3, r3
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d103      	bne.n	8004a46 <xQueueGenericSend+0x18a>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a46:	f001 fef1 	bl	800682c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a4a:	1d3a      	adds	r2, r7, #4
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 f806 	bl	8005a64 <xTaskCheckForTimeOut>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d124      	bne.n	8004aa8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a60:	f000 faa6 	bl	8004fb0 <prvIsQueueFull>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d018      	beq.n	8004a9c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	3310      	adds	r3, #16
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 ff2a 	bl	80058cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7a:	f000 fa31 	bl	8004ee0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a7e:	f000 fd5f 	bl	8005540 <xTaskResumeAll>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f af7c 	bne.w	8004982 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <xQueueGenericSend+0x200>)
 8004a8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	e772      	b.n	8004982 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a9e:	f000 fa1f 	bl	8004ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aa2:	f000 fd4d 	bl	8005540 <xTaskResumeAll>
 8004aa6:	e76c      	b.n	8004982 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004aa8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004aaa:	f000 fa19 	bl	8004ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aae:	f000 fd47 	bl	8005540 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ab2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3738      	adds	r7, #56	@ 0x38
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	e000ed04 	.word	0xe000ed04

08004ac0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b090      	sub	sp, #64	@ 0x40
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004adc:	f383 8811 	msr	BASEPRI, r3
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	f3bf 8f4f 	dsb	sy
 8004ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004aea:	bf00      	nop
 8004aec:	bf00      	nop
 8004aee:	e7fd      	b.n	8004aec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d103      	bne.n	8004afe <xQueueGenericSendFromISR+0x3e>
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <xQueueGenericSendFromISR+0x42>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e000      	b.n	8004b04 <xQueueGenericSendFromISR+0x44>
 8004b02:	2300      	movs	r3, #0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10b      	bne.n	8004b20 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	e7fd      	b.n	8004b1c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d103      	bne.n	8004b2e <xQueueGenericSendFromISR+0x6e>
 8004b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <xQueueGenericSendFromISR+0x72>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueGenericSendFromISR+0x74>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	623b      	str	r3, [r7, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b50:	f001 ff1a 	bl	8006988 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b54:	f3ef 8211 	mrs	r2, BASEPRI
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	61fa      	str	r2, [r7, #28]
 8004b6a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b6e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d302      	bcc.n	8004b82 <xQueueGenericSendFromISR+0xc2>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d12f      	bne.n	8004be2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b98:	f000 f912 	bl	8004dc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d112      	bne.n	8004bcc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	3324      	adds	r3, #36	@ 0x24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fedc 	bl	8005970 <xTaskRemoveFromEventList>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00e      	beq.n	8004bdc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00b      	beq.n	8004bdc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e007      	b.n	8004bdc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	b25a      	sxtb	r2, r3
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004be0:	e001      	b.n	8004be6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004be8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bf0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3740      	adds	r7, #64	@ 0x40
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08c      	sub	sp, #48	@ 0x30
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <xQueueReceive+0x32>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	623b      	str	r3, [r7, #32]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <xQueueReceive+0x40>
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <xQueueReceive+0x44>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <xQueueReceive+0x46>
 8004c40:	2300      	movs	r3, #0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <xQueueReceive+0x62>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	61fb      	str	r3, [r7, #28]
}
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	e7fd      	b.n	8004c5a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c5e:	f001 f847 	bl	8005cf0 <xTaskGetSchedulerState>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <xQueueReceive+0x72>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <xQueueReceive+0x76>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <xQueueReceive+0x78>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10b      	bne.n	8004c90 <xQueueReceive+0x94>
	__asm volatile
 8004c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	61bb      	str	r3, [r7, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	e7fd      	b.n	8004c8c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c90:	f001 fd9a 	bl	80067c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01f      	beq.n	8004ce0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca4:	f000 f8f6 	bl	8004e94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004caa:	1e5a      	subs	r2, r3, #1
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00f      	beq.n	8004cd8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	3310      	adds	r3, #16
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fe57 	bl	8005970 <xTaskRemoveFromEventList>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8004dbc <xQueueReceive+0x1c0>)
 8004cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cd8:	f001 fda8 	bl	800682c <vPortExitCritical>
				return pdPASS;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e069      	b.n	8004db4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ce6:	f001 fda1 	bl	800682c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e062      	b.n	8004db4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cf4:	f107 0310 	add.w	r3, r7, #16
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fe9d 	bl	8005a38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d02:	f001 fd93 	bl	800682c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d06:	f000 fc0d 	bl	8005524 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d0a:	f001 fd5d 	bl	80067c8 <vPortEnterCritical>
 8004d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d14:	b25b      	sxtb	r3, r3
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d103      	bne.n	8004d24 <xQueueReceive+0x128>
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d2a:	b25b      	sxtb	r3, r3
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d103      	bne.n	8004d3a <xQueueReceive+0x13e>
 8004d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d3a:	f001 fd77 	bl	800682c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d3e:	1d3a      	adds	r2, r7, #4
 8004d40:	f107 0310 	add.w	r3, r7, #16
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fe8c 	bl	8005a64 <xTaskCheckForTimeOut>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d123      	bne.n	8004d9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d54:	f000 f916 	bl	8004f84 <prvIsQueueEmpty>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d60:	3324      	adds	r3, #36	@ 0x24
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fdb0 	bl	80058cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d6e:	f000 f8b7 	bl	8004ee0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d72:	f000 fbe5 	bl	8005540 <xTaskResumeAll>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d189      	bne.n	8004c90 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <xQueueReceive+0x1c0>)
 8004d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	e780      	b.n	8004c90 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d90:	f000 f8a6 	bl	8004ee0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d94:	f000 fbd4 	bl	8005540 <xTaskResumeAll>
 8004d98:	e77a      	b.n	8004c90 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d9c:	f000 f8a0 	bl	8004ee0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004da0:	f000 fbce 	bl	8005540 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004da4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004da6:	f000 f8ed 	bl	8004f84 <prvIsQueueEmpty>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f43f af6f 	beq.w	8004c90 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004db2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3730      	adds	r7, #48	@ 0x30
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d14d      	bne.n	8004e82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 ff9e 	bl	8005d2c <xTaskPriorityDisinherit>
 8004df0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	609a      	str	r2, [r3, #8]
 8004df8:	e043      	b.n	8004e82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d119      	bne.n	8004e34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6858      	ldr	r0, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	f002 f866 	bl	8006edc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	441a      	add	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d32b      	bcc.n	8004e82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	e026      	b.n	8004e82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68d8      	ldr	r0, [r3, #12]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	f002 f84c 	bl	8006edc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	425b      	negs	r3, r3
 8004e4e:	441a      	add	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d207      	bcs.n	8004e70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	425b      	negs	r3, r3
 8004e6a:	441a      	add	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d105      	bne.n	8004e82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e8a:	697b      	ldr	r3, [r7, #20]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d018      	beq.n	8004ed8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	441a      	add	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d303      	bcc.n	8004ec8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68d9      	ldr	r1, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6838      	ldr	r0, [r7, #0]
 8004ed4:	f002 f802 	bl	8006edc <memcpy>
	}
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ee8:	f001 fc6e 	bl	80067c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ef2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef4:	e011      	b.n	8004f1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d012      	beq.n	8004f24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3324      	adds	r3, #36	@ 0x24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fd34 	bl	8005970 <xTaskRemoveFromEventList>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f0e:	f000 fe0d 	bl	8005b2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	dce9      	bgt.n	8004ef6 <prvUnlockQueue+0x16>
 8004f22:	e000      	b.n	8004f26 <prvUnlockQueue+0x46>
					break;
 8004f24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	22ff      	movs	r2, #255	@ 0xff
 8004f2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004f2e:	f001 fc7d 	bl	800682c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f32:	f001 fc49 	bl	80067c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f3e:	e011      	b.n	8004f64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d012      	beq.n	8004f6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3310      	adds	r3, #16
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fd0f 	bl	8005970 <xTaskRemoveFromEventList>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f58:	f000 fde8 	bl	8005b2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	dce9      	bgt.n	8004f40 <prvUnlockQueue+0x60>
 8004f6c:	e000      	b.n	8004f70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	22ff      	movs	r2, #255	@ 0xff
 8004f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f78:	f001 fc58 	bl	800682c <vPortExitCritical>
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f8c:	f001 fc1c 	bl	80067c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e001      	b.n	8004fa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fa2:	f001 fc43 	bl	800682c <vPortExitCritical>

	return xReturn;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004fb8:	f001 fc06 	bl	80067c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d102      	bne.n	8004fce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	e001      	b.n	8004fd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fd2:	f001 fc2b 	bl	800682c <vPortExitCritical>

	return xReturn;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e014      	b.n	800501a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8005030 <vQueueAddToRegistry+0x50>)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ffc:	490c      	ldr	r1, [pc, #48]	@ (8005030 <vQueueAddToRegistry+0x50>)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005006:	4a0a      	ldr	r2, [pc, #40]	@ (8005030 <vQueueAddToRegistry+0x50>)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	4413      	add	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005012:	e006      	b.n	8005022 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3301      	adds	r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b07      	cmp	r3, #7
 800501e:	d9e7      	bls.n	8004ff0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	200007d8 	.word	0x200007d8

08005034 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005044:	f001 fbc0 	bl	80067c8 <vPortEnterCritical>
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800504e:	b25b      	sxtb	r3, r3
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005054:	d103      	bne.n	800505e <vQueueWaitForMessageRestricted+0x2a>
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005064:	b25b      	sxtb	r3, r3
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d103      	bne.n	8005074 <vQueueWaitForMessageRestricted+0x40>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005074:	f001 fbda 	bl	800682c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	3324      	adds	r3, #36	@ 0x24
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 fc45 	bl	8005918 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800508e:	6978      	ldr	r0, [r7, #20]
 8005090:	f7ff ff26 	bl	8004ee0 <prvUnlockQueue>
	}
 8005094:	bf00      	nop
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08e      	sub	sp, #56	@ 0x38
 80050a0:	af04      	add	r7, sp, #16
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80050aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10b      	bne.n	80050c8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	623b      	str	r3, [r7, #32]
}
 80050c2:	bf00      	nop
 80050c4:	bf00      	nop
 80050c6:	e7fd      	b.n	80050c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	61fb      	str	r3, [r7, #28]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050e6:	235c      	movs	r3, #92	@ 0x5c
 80050e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80050ee:	d00b      	beq.n	8005108 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61bb      	str	r3, [r7, #24]
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005108:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800510a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01e      	beq.n	800514e <xTaskCreateStatic+0xb2>
 8005110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01b      	beq.n	800514e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005118:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005128:	2300      	movs	r3, #0
 800512a:	9303      	str	r3, [sp, #12]
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	9302      	str	r3, [sp, #8]
 8005130:	f107 0314 	add.w	r3, r7, #20
 8005134:	9301      	str	r3, [sp, #4]
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f850 	bl	80051e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005146:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005148:	f000 f8de 	bl	8005308 <prvAddNewTaskToReadyList>
 800514c:	e001      	b.n	8005152 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005152:	697b      	ldr	r3, [r7, #20]
	}
 8005154:	4618      	mov	r0, r3
 8005156:	3728      	adds	r7, #40	@ 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08c      	sub	sp, #48	@ 0x30
 8005160:	af04      	add	r7, sp, #16
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4618      	mov	r0, r3
 8005172:	f001 fc4b 	bl	8006a0c <pvPortMalloc>
 8005176:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00e      	beq.n	800519c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800517e:	205c      	movs	r0, #92	@ 0x5c
 8005180:	f001 fc44 	bl	8006a0c <pvPortMalloc>
 8005184:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
 8005192:	e005      	b.n	80051a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005194:	6978      	ldr	r0, [r7, #20]
 8005196:	f001 fd07 	bl	8006ba8 <vPortFree>
 800519a:	e001      	b.n	80051a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d017      	beq.n	80051d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051ae:	88fa      	ldrh	r2, [r7, #6]
 80051b0:	2300      	movs	r3, #0
 80051b2:	9303      	str	r3, [sp, #12]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	9302      	str	r3, [sp, #8]
 80051b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68b9      	ldr	r1, [r7, #8]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f80e 	bl	80051e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ca:	69f8      	ldr	r0, [r7, #28]
 80051cc:	f000 f89c 	bl	8005308 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051d0:	2301      	movs	r3, #1
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e002      	b.n	80051dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051d6:	f04f 33ff 	mov.w	r3, #4294967295
 80051da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051dc:	69bb      	ldr	r3, [r7, #24]
	}
 80051de:	4618      	mov	r0, r3
 80051e0:	3720      	adds	r7, #32
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b088      	sub	sp, #32
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	461a      	mov	r2, r3
 80051fe:	21a5      	movs	r1, #165	@ 0xa5
 8005200:	f001 fe26 	bl	8006e50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800520e:	3b01      	subs	r3, #1
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f023 0307 	bic.w	r3, r3, #7
 800521c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f003 0307 	and.w	r3, r3, #7
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	617b      	str	r3, [r7, #20]
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	e7fd      	b.n	800523c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01f      	beq.n	8005286 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	e012      	b.n	8005272 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	7819      	ldrb	r1, [r3, #0]
 8005254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	4413      	add	r3, r2
 800525a:	3334      	adds	r3, #52	@ 0x34
 800525c:	460a      	mov	r2, r1
 800525e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d006      	beq.n	800527a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	2b0f      	cmp	r3, #15
 8005276:	d9e9      	bls.n	800524c <prvInitialiseNewTask+0x66>
 8005278:	e000      	b.n	800527c <prvInitialiseNewTask+0x96>
			{
				break;
 800527a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005284:	e003      	b.n	800528e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	2b37      	cmp	r3, #55	@ 0x37
 8005292:	d901      	bls.n	8005298 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005294:	2337      	movs	r3, #55	@ 0x37
 8005296:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800529c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800529e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	2200      	movs	r2, #0
 80052a8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	3304      	adds	r3, #4
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7ff f92a 	bl	8004508 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	3318      	adds	r3, #24
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff f925 	bl	8004508 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	2200      	movs	r2, #0
 80052d8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68f9      	ldr	r1, [r7, #12]
 80052e6:	69b8      	ldr	r0, [r7, #24]
 80052e8:	f001 f93e 	bl	8006568 <pxPortInitialiseStack>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052fe:	bf00      	nop
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005310:	f001 fa5a 	bl	80067c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005314:	4b2d      	ldr	r3, [pc, #180]	@ (80053cc <prvAddNewTaskToReadyList+0xc4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	4a2c      	ldr	r2, [pc, #176]	@ (80053cc <prvAddNewTaskToReadyList+0xc4>)
 800531c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800531e:	4b2c      	ldr	r3, [pc, #176]	@ (80053d0 <prvAddNewTaskToReadyList+0xc8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d109      	bne.n	800533a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005326:	4a2a      	ldr	r2, [pc, #168]	@ (80053d0 <prvAddNewTaskToReadyList+0xc8>)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800532c:	4b27      	ldr	r3, [pc, #156]	@ (80053cc <prvAddNewTaskToReadyList+0xc4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d110      	bne.n	8005356 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005334:	f000 fc1e 	bl	8005b74 <prvInitialiseTaskLists>
 8005338:	e00d      	b.n	8005356 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800533a:	4b26      	ldr	r3, [pc, #152]	@ (80053d4 <prvAddNewTaskToReadyList+0xcc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005342:	4b23      	ldr	r3, [pc, #140]	@ (80053d0 <prvAddNewTaskToReadyList+0xc8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	429a      	cmp	r2, r3
 800534e:	d802      	bhi.n	8005356 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005350:	4a1f      	ldr	r2, [pc, #124]	@ (80053d0 <prvAddNewTaskToReadyList+0xc8>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005356:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <prvAddNewTaskToReadyList+0xd0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3301      	adds	r3, #1
 800535c:	4a1e      	ldr	r2, [pc, #120]	@ (80053d8 <prvAddNewTaskToReadyList+0xd0>)
 800535e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <prvAddNewTaskToReadyList+0xd0>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <prvAddNewTaskToReadyList+0xd4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d903      	bls.n	800537c <prvAddNewTaskToReadyList+0x74>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005378:	4a18      	ldr	r2, [pc, #96]	@ (80053dc <prvAddNewTaskToReadyList+0xd4>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4a15      	ldr	r2, [pc, #84]	@ (80053e0 <prvAddNewTaskToReadyList+0xd8>)
 800538a:	441a      	add	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f7ff f8c5 	bl	8004522 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005398:	f001 fa48 	bl	800682c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800539c:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <prvAddNewTaskToReadyList+0xcc>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053a4:	4b0a      	ldr	r3, [pc, #40]	@ (80053d0 <prvAddNewTaskToReadyList+0xc8>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d207      	bcs.n	80053c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053b2:	4b0c      	ldr	r3, [pc, #48]	@ (80053e4 <prvAddNewTaskToReadyList+0xdc>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000cec 	.word	0x20000cec
 80053d0:	20000818 	.word	0x20000818
 80053d4:	20000cf8 	.word	0x20000cf8
 80053d8:	20000d08 	.word	0x20000d08
 80053dc:	20000cf4 	.word	0x20000cf4
 80053e0:	2000081c 	.word	0x2000081c
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053fa:	4b14      	ldr	r3, [pc, #80]	@ (800544c <vTaskDelay+0x64>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00b      	beq.n	800541a <vTaskDelay+0x32>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60bb      	str	r3, [r7, #8]
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop
 8005418:	e7fd      	b.n	8005416 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800541a:	f000 f883 	bl	8005524 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800541e:	2100      	movs	r1, #0
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fcf3 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005426:	f000 f88b 	bl	8005540 <xTaskResumeAll>
 800542a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d107      	bne.n	8005442 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005432:	4b07      	ldr	r3, [pc, #28]	@ (8005450 <vTaskDelay+0x68>)
 8005434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000d14 	.word	0x20000d14
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08a      	sub	sp, #40	@ 0x28
 8005458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005462:	463a      	mov	r2, r7
 8005464:	1d39      	adds	r1, r7, #4
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fff8 	bl	8004460 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	9202      	str	r2, [sp, #8]
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	2300      	movs	r3, #0
 8005480:	460a      	mov	r2, r1
 8005482:	4922      	ldr	r1, [pc, #136]	@ (800550c <vTaskStartScheduler+0xb8>)
 8005484:	4822      	ldr	r0, [pc, #136]	@ (8005510 <vTaskStartScheduler+0xbc>)
 8005486:	f7ff fe09 	bl	800509c <xTaskCreateStatic>
 800548a:	4603      	mov	r3, r0
 800548c:	4a21      	ldr	r2, [pc, #132]	@ (8005514 <vTaskStartScheduler+0xc0>)
 800548e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005490:	4b20      	ldr	r3, [pc, #128]	@ (8005514 <vTaskStartScheduler+0xc0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005498:	2301      	movs	r3, #1
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e001      	b.n	80054a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d102      	bne.n	80054ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054a8:	f000 fd04 	bl	8005eb4 <xTimerCreateTimerTask>
 80054ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d116      	bne.n	80054e2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80054b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b8:	f383 8811 	msr	BASEPRI, r3
 80054bc:	f3bf 8f6f 	isb	sy
 80054c0:	f3bf 8f4f 	dsb	sy
 80054c4:	613b      	str	r3, [r7, #16]
}
 80054c6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054c8:	4b13      	ldr	r3, [pc, #76]	@ (8005518 <vTaskStartScheduler+0xc4>)
 80054ca:	f04f 32ff 	mov.w	r2, #4294967295
 80054ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054d0:	4b12      	ldr	r3, [pc, #72]	@ (800551c <vTaskStartScheduler+0xc8>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054d6:	4b12      	ldr	r3, [pc, #72]	@ (8005520 <vTaskStartScheduler+0xcc>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054dc:	f001 f8d0 	bl	8006680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054e0:	e00f      	b.n	8005502 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d10b      	bne.n	8005502 <vTaskStartScheduler+0xae>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	60fb      	str	r3, [r7, #12]
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	e7fd      	b.n	80054fe <vTaskStartScheduler+0xaa>
}
 8005502:	bf00      	nop
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	08007814 	.word	0x08007814
 8005510:	08005b45 	.word	0x08005b45
 8005514:	20000d10 	.word	0x20000d10
 8005518:	20000d0c 	.word	0x20000d0c
 800551c:	20000cf8 	.word	0x20000cf8
 8005520:	20000cf0 	.word	0x20000cf0

08005524 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005528:	4b04      	ldr	r3, [pc, #16]	@ (800553c <vTaskSuspendAll+0x18>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	4a03      	ldr	r2, [pc, #12]	@ (800553c <vTaskSuspendAll+0x18>)
 8005530:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005532:	bf00      	nop
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	20000d14 	.word	0x20000d14

08005540 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800554e:	4b42      	ldr	r3, [pc, #264]	@ (8005658 <xTaskResumeAll+0x118>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <xTaskResumeAll+0x2e>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	603b      	str	r3, [r7, #0]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800556e:	f001 f92b 	bl	80067c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005572:	4b39      	ldr	r3, [pc, #228]	@ (8005658 <xTaskResumeAll+0x118>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3b01      	subs	r3, #1
 8005578:	4a37      	ldr	r2, [pc, #220]	@ (8005658 <xTaskResumeAll+0x118>)
 800557a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800557c:	4b36      	ldr	r3, [pc, #216]	@ (8005658 <xTaskResumeAll+0x118>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d162      	bne.n	800564a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005584:	4b35      	ldr	r3, [pc, #212]	@ (800565c <xTaskResumeAll+0x11c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05e      	beq.n	800564a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800558c:	e02f      	b.n	80055ee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800558e:	4b34      	ldr	r3, [pc, #208]	@ (8005660 <xTaskResumeAll+0x120>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	3318      	adds	r3, #24
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff f81e 	bl	80045dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff f819 	bl	80045dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <xTaskResumeAll+0x124>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d903      	bls.n	80055be <xTaskResumeAll+0x7e>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <xTaskResumeAll+0x124>)
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a27      	ldr	r2, [pc, #156]	@ (8005668 <xTaskResumeAll+0x128>)
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f7fe ffa4 	bl	8004522 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <xTaskResumeAll+0x12c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055e8:	4b21      	ldr	r3, [pc, #132]	@ (8005670 <xTaskResumeAll+0x130>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005660 <xTaskResumeAll+0x120>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1cb      	bne.n	800558e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055fc:	f000 fb58 	bl	8005cb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005600:	4b1c      	ldr	r3, [pc, #112]	@ (8005674 <xTaskResumeAll+0x134>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d010      	beq.n	800562e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800560c:	f000 f846 	bl	800569c <xTaskIncrementTick>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005616:	4b16      	ldr	r3, [pc, #88]	@ (8005670 <xTaskResumeAll+0x130>)
 8005618:	2201      	movs	r2, #1
 800561a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3b01      	subs	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f1      	bne.n	800560c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005628:	4b12      	ldr	r3, [pc, #72]	@ (8005674 <xTaskResumeAll+0x134>)
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800562e:	4b10      	ldr	r3, [pc, #64]	@ (8005670 <xTaskResumeAll+0x130>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005636:	2301      	movs	r3, #1
 8005638:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800563a:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <xTaskResumeAll+0x138>)
 800563c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800564a:	f001 f8ef 	bl	800682c <vPortExitCritical>

	return xAlreadyYielded;
 800564e:	68bb      	ldr	r3, [r7, #8]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000d14 	.word	0x20000d14
 800565c:	20000cec 	.word	0x20000cec
 8005660:	20000cac 	.word	0x20000cac
 8005664:	20000cf4 	.word	0x20000cf4
 8005668:	2000081c 	.word	0x2000081c
 800566c:	20000818 	.word	0x20000818
 8005670:	20000d00 	.word	0x20000d00
 8005674:	20000cfc 	.word	0x20000cfc
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005682:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <xTaskGetTickCount+0x1c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005688:	687b      	ldr	r3, [r7, #4]
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000cf0 	.word	0x20000cf0

0800569c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a6:	4b4f      	ldr	r3, [pc, #316]	@ (80057e4 <xTaskIncrementTick+0x148>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f040 8090 	bne.w	80057d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056b0:	4b4d      	ldr	r3, [pc, #308]	@ (80057e8 <xTaskIncrementTick+0x14c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056b8:	4a4b      	ldr	r2, [pc, #300]	@ (80057e8 <xTaskIncrementTick+0x14c>)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d121      	bne.n	8005708 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056c4:	4b49      	ldr	r3, [pc, #292]	@ (80057ec <xTaskIncrementTick+0x150>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00b      	beq.n	80056e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	603b      	str	r3, [r7, #0]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <xTaskIncrementTick+0x46>
 80056e6:	4b41      	ldr	r3, [pc, #260]	@ (80057ec <xTaskIncrementTick+0x150>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	4b40      	ldr	r3, [pc, #256]	@ (80057f0 <xTaskIncrementTick+0x154>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a3e      	ldr	r2, [pc, #248]	@ (80057ec <xTaskIncrementTick+0x150>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	4a3e      	ldr	r2, [pc, #248]	@ (80057f0 <xTaskIncrementTick+0x154>)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6013      	str	r3, [r2, #0]
 80056fa:	4b3e      	ldr	r3, [pc, #248]	@ (80057f4 <xTaskIncrementTick+0x158>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3301      	adds	r3, #1
 8005700:	4a3c      	ldr	r2, [pc, #240]	@ (80057f4 <xTaskIncrementTick+0x158>)
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	f000 fad4 	bl	8005cb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005708:	4b3b      	ldr	r3, [pc, #236]	@ (80057f8 <xTaskIncrementTick+0x15c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	429a      	cmp	r2, r3
 8005710:	d349      	bcc.n	80057a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005712:	4b36      	ldr	r3, [pc, #216]	@ (80057ec <xTaskIncrementTick+0x150>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800571c:	4b36      	ldr	r3, [pc, #216]	@ (80057f8 <xTaskIncrementTick+0x15c>)
 800571e:	f04f 32ff 	mov.w	r2, #4294967295
 8005722:	601a      	str	r2, [r3, #0]
					break;
 8005724:	e03f      	b.n	80057a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005726:	4b31      	ldr	r3, [pc, #196]	@ (80057ec <xTaskIncrementTick+0x150>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	429a      	cmp	r2, r3
 800573c:	d203      	bcs.n	8005746 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800573e:	4a2e      	ldr	r2, [pc, #184]	@ (80057f8 <xTaskIncrementTick+0x15c>)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005744:	e02f      	b.n	80057a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	3304      	adds	r3, #4
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe ff46 	bl	80045dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	3318      	adds	r3, #24
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe ff3d 	bl	80045dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005766:	4b25      	ldr	r3, [pc, #148]	@ (80057fc <xTaskIncrementTick+0x160>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d903      	bls.n	8005776 <xTaskIncrementTick+0xda>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005772:	4a22      	ldr	r2, [pc, #136]	@ (80057fc <xTaskIncrementTick+0x160>)
 8005774:	6013      	str	r3, [r2, #0]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4a1f      	ldr	r2, [pc, #124]	@ (8005800 <xTaskIncrementTick+0x164>)
 8005784:	441a      	add	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3304      	adds	r3, #4
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f7fe fec8 	bl	8004522 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005796:	4b1b      	ldr	r3, [pc, #108]	@ (8005804 <xTaskIncrementTick+0x168>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	429a      	cmp	r2, r3
 800579e:	d3b8      	bcc.n	8005712 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a4:	e7b5      	b.n	8005712 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057a6:	4b17      	ldr	r3, [pc, #92]	@ (8005804 <xTaskIncrementTick+0x168>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ac:	4914      	ldr	r1, [pc, #80]	@ (8005800 <xTaskIncrementTick+0x164>)
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d901      	bls.n	80057c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057be:	2301      	movs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057c2:	4b11      	ldr	r3, [pc, #68]	@ (8005808 <xTaskIncrementTick+0x16c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057ca:	2301      	movs	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e004      	b.n	80057da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057d0:	4b0e      	ldr	r3, [pc, #56]	@ (800580c <xTaskIncrementTick+0x170>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	4a0d      	ldr	r2, [pc, #52]	@ (800580c <xTaskIncrementTick+0x170>)
 80057d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057da:	697b      	ldr	r3, [r7, #20]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000d14 	.word	0x20000d14
 80057e8:	20000cf0 	.word	0x20000cf0
 80057ec:	20000ca4 	.word	0x20000ca4
 80057f0:	20000ca8 	.word	0x20000ca8
 80057f4:	20000d04 	.word	0x20000d04
 80057f8:	20000d0c 	.word	0x20000d0c
 80057fc:	20000cf4 	.word	0x20000cf4
 8005800:	2000081c 	.word	0x2000081c
 8005804:	20000818 	.word	0x20000818
 8005808:	20000d00 	.word	0x20000d00
 800580c:	20000cfc 	.word	0x20000cfc

08005810 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005816:	4b28      	ldr	r3, [pc, #160]	@ (80058b8 <vTaskSwitchContext+0xa8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800581e:	4b27      	ldr	r3, [pc, #156]	@ (80058bc <vTaskSwitchContext+0xac>)
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005824:	e042      	b.n	80058ac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005826:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <vTaskSwitchContext+0xac>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582c:	4b24      	ldr	r3, [pc, #144]	@ (80058c0 <vTaskSwitchContext+0xb0>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e011      	b.n	8005858 <vTaskSwitchContext+0x48>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <vTaskSwitchContext+0x42>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	607b      	str	r3, [r7, #4]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <vTaskSwitchContext+0x3e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b01      	subs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	491a      	ldr	r1, [pc, #104]	@ (80058c4 <vTaskSwitchContext+0xb4>)
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0e3      	beq.n	8005834 <vTaskSwitchContext+0x24>
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4a13      	ldr	r2, [pc, #76]	@ (80058c4 <vTaskSwitchContext+0xb4>)
 8005878:	4413      	add	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3308      	adds	r3, #8
 800588e:	429a      	cmp	r2, r3
 8005890:	d104      	bne.n	800589c <vTaskSwitchContext+0x8c>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	4a09      	ldr	r2, [pc, #36]	@ (80058c8 <vTaskSwitchContext+0xb8>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	4a06      	ldr	r2, [pc, #24]	@ (80058c0 <vTaskSwitchContext+0xb0>)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6013      	str	r3, [r2, #0]
}
 80058ac:	bf00      	nop
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000d14 	.word	0x20000d14
 80058bc:	20000d00 	.word	0x20000d00
 80058c0:	20000cf4 	.word	0x20000cf4
 80058c4:	2000081c 	.word	0x2000081c
 80058c8:	20000818 	.word	0x20000818

080058cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10b      	bne.n	80058f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	60fb      	str	r3, [r7, #12]
}
 80058ee:	bf00      	nop
 80058f0:	bf00      	nop
 80058f2:	e7fd      	b.n	80058f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f4:	4b07      	ldr	r3, [pc, #28]	@ (8005914 <vTaskPlaceOnEventList+0x48>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3318      	adds	r3, #24
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fe fe34 	bl	800456a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005902:	2101      	movs	r1, #1
 8005904:	6838      	ldr	r0, [r7, #0]
 8005906:	f000 fa81 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000818 	.word	0x20000818

08005918 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b086      	sub	sp, #24
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	617b      	str	r3, [r7, #20]
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	e7fd      	b.n	800593e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005942:	4b0a      	ldr	r3, [pc, #40]	@ (800596c <vTaskPlaceOnEventListRestricted+0x54>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3318      	adds	r3, #24
 8005948:	4619      	mov	r1, r3
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7fe fde9 	bl	8004522 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68b8      	ldr	r0, [r7, #8]
 8005960:	f000 fa54 	bl	8005e0c <prvAddCurrentTaskToDelayedList>
	}
 8005964:	bf00      	nop
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000818 	.word	0x20000818

08005970 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3318      	adds	r3, #24
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fe1a 	bl	80045dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a20 <xTaskRemoveFromEventList+0xb0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d11d      	bne.n	80059ec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fe fe11 	bl	80045dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059be:	4b19      	ldr	r3, [pc, #100]	@ (8005a24 <xTaskRemoveFromEventList+0xb4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d903      	bls.n	80059ce <xTaskRemoveFromEventList+0x5e>
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ca:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <xTaskRemoveFromEventList+0xb4>)
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d2:	4613      	mov	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4a13      	ldr	r2, [pc, #76]	@ (8005a28 <xTaskRemoveFromEventList+0xb8>)
 80059dc:	441a      	add	r2, r3
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f7fe fd9c 	bl	8004522 <vListInsertEnd>
 80059ea:	e005      	b.n	80059f8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3318      	adds	r3, #24
 80059f0:	4619      	mov	r1, r3
 80059f2:	480e      	ldr	r0, [pc, #56]	@ (8005a2c <xTaskRemoveFromEventList+0xbc>)
 80059f4:	f7fe fd95 	bl	8004522 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a30 <xTaskRemoveFromEventList+0xc0>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d905      	bls.n	8005a12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a06:	2301      	movs	r3, #1
 8005a08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <xTaskRemoveFromEventList+0xc4>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e001      	b.n	8005a16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a16:	697b      	ldr	r3, [r7, #20]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3718      	adds	r7, #24
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000d14 	.word	0x20000d14
 8005a24:	20000cf4 	.word	0x20000cf4
 8005a28:	2000081c 	.word	0x2000081c
 8005a2c:	20000cac 	.word	0x20000cac
 8005a30:	20000818 	.word	0x20000818
 8005a34:	20000d00 	.word	0x20000d00

08005a38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <vTaskInternalSetTimeOutState+0x24>)
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a48:	4b05      	ldr	r3, [pc, #20]	@ (8005a60 <vTaskInternalSetTimeOutState+0x28>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	605a      	str	r2, [r3, #4]
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	20000d04 	.word	0x20000d04
 8005a60:	20000cf0 	.word	0x20000cf0

08005a64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10b      	bne.n	8005a8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	613b      	str	r3, [r7, #16]
}
 8005a86:	bf00      	nop
 8005a88:	bf00      	nop
 8005a8a:	e7fd      	b.n	8005a88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10b      	bne.n	8005aaa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a96:	f383 8811 	msr	BASEPRI, r3
 8005a9a:	f3bf 8f6f 	isb	sy
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	60fb      	str	r3, [r7, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	e7fd      	b.n	8005aa6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005aaa:	f000 fe8d 	bl	80067c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005aae:	4b1d      	ldr	r3, [pc, #116]	@ (8005b24 <xTaskCheckForTimeOut+0xc0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac6:	d102      	bne.n	8005ace <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	e023      	b.n	8005b16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <xTaskCheckForTimeOut+0xc4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d007      	beq.n	8005aea <xTaskCheckForTimeOut+0x86>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d302      	bcc.n	8005aea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	e015      	b.n	8005b16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d20b      	bcs.n	8005b0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad2      	subs	r2, r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ff99 	bl	8005a38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b06:	2300      	movs	r3, #0
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	e004      	b.n	8005b16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b12:	2301      	movs	r3, #1
 8005b14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b16:	f000 fe89 	bl	800682c <vPortExitCritical>

	return xReturn;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3720      	adds	r7, #32
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000cf0 	.word	0x20000cf0
 8005b28:	20000d04 	.word	0x20000d04

08005b2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b30:	4b03      	ldr	r3, [pc, #12]	@ (8005b40 <vTaskMissedYield+0x14>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
}
 8005b36:	bf00      	nop
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	20000d00 	.word	0x20000d00

08005b44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b4c:	f000 f852 	bl	8005bf4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b50:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <prvIdleTask+0x28>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d9f9      	bls.n	8005b4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b58:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <prvIdleTask+0x2c>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b68:	e7f0      	b.n	8005b4c <prvIdleTask+0x8>
 8005b6a:	bf00      	nop
 8005b6c:	2000081c 	.word	0x2000081c
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	e00c      	b.n	8005b9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a12      	ldr	r2, [pc, #72]	@ (8005bd4 <prvInitialiseTaskLists+0x60>)
 8005b8c:	4413      	add	r3, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fc9a 	bl	80044c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3301      	adds	r3, #1
 8005b98:	607b      	str	r3, [r7, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b37      	cmp	r3, #55	@ 0x37
 8005b9e:	d9ef      	bls.n	8005b80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ba0:	480d      	ldr	r0, [pc, #52]	@ (8005bd8 <prvInitialiseTaskLists+0x64>)
 8005ba2:	f7fe fc91 	bl	80044c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ba6:	480d      	ldr	r0, [pc, #52]	@ (8005bdc <prvInitialiseTaskLists+0x68>)
 8005ba8:	f7fe fc8e 	bl	80044c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bac:	480c      	ldr	r0, [pc, #48]	@ (8005be0 <prvInitialiseTaskLists+0x6c>)
 8005bae:	f7fe fc8b 	bl	80044c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bb2:	480c      	ldr	r0, [pc, #48]	@ (8005be4 <prvInitialiseTaskLists+0x70>)
 8005bb4:	f7fe fc88 	bl	80044c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bb8:	480b      	ldr	r0, [pc, #44]	@ (8005be8 <prvInitialiseTaskLists+0x74>)
 8005bba:	f7fe fc85 	bl	80044c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005bec <prvInitialiseTaskLists+0x78>)
 8005bc0:	4a05      	ldr	r2, [pc, #20]	@ (8005bd8 <prvInitialiseTaskLists+0x64>)
 8005bc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <prvInitialiseTaskLists+0x7c>)
 8005bc6:	4a05      	ldr	r2, [pc, #20]	@ (8005bdc <prvInitialiseTaskLists+0x68>)
 8005bc8:	601a      	str	r2, [r3, #0]
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000081c 	.word	0x2000081c
 8005bd8:	20000c7c 	.word	0x20000c7c
 8005bdc:	20000c90 	.word	0x20000c90
 8005be0:	20000cac 	.word	0x20000cac
 8005be4:	20000cc0 	.word	0x20000cc0
 8005be8:	20000cd8 	.word	0x20000cd8
 8005bec:	20000ca4 	.word	0x20000ca4
 8005bf0:	20000ca8 	.word	0x20000ca8

08005bf4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bfa:	e019      	b.n	8005c30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bfc:	f000 fde4 	bl	80067c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c00:	4b10      	ldr	r3, [pc, #64]	@ (8005c44 <prvCheckTasksWaitingTermination+0x50>)
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fe fce5 	bl	80045dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c12:	4b0d      	ldr	r3, [pc, #52]	@ (8005c48 <prvCheckTasksWaitingTermination+0x54>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3b01      	subs	r3, #1
 8005c18:	4a0b      	ldr	r2, [pc, #44]	@ (8005c48 <prvCheckTasksWaitingTermination+0x54>)
 8005c1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c4c <prvCheckTasksWaitingTermination+0x58>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	4a0a      	ldr	r2, [pc, #40]	@ (8005c4c <prvCheckTasksWaitingTermination+0x58>)
 8005c24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c26:	f000 fe01 	bl	800682c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f810 	bl	8005c50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c30:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <prvCheckTasksWaitingTermination+0x58>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e1      	bne.n	8005bfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000cc0 	.word	0x20000cc0
 8005c48:	20000cec 	.word	0x20000cec
 8005c4c:	20000cd4 	.word	0x20000cd4

08005c50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d108      	bne.n	8005c74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 ff9e 	bl	8006ba8 <vPortFree>
				vPortFree( pxTCB );
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 ff9b 	bl	8006ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c72:	e019      	b.n	8005ca8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d103      	bne.n	8005c86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 ff92 	bl	8006ba8 <vPortFree>
	}
 8005c84:	e010      	b.n	8005ca8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d00b      	beq.n	8005ca8 <prvDeleteTCB+0x58>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <prvDeleteTCB+0x54>
	}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce8 <prvResetNextTaskUnblockTime+0x38>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d104      	bne.n	8005cca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cec <prvResetNextTaskUnblockTime+0x3c>)
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cc8:	e008      	b.n	8005cdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cca:	4b07      	ldr	r3, [pc, #28]	@ (8005ce8 <prvResetNextTaskUnblockTime+0x38>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4a04      	ldr	r2, [pc, #16]	@ (8005cec <prvResetNextTaskUnblockTime+0x3c>)
 8005cda:	6013      	str	r3, [r2, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20000ca4 	.word	0x20000ca4
 8005cec:	20000d0c 	.word	0x20000d0c

08005cf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005d24 <xTaskGetSchedulerState+0x34>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d102      	bne.n	8005d04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	e008      	b.n	8005d16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d04:	4b08      	ldr	r3, [pc, #32]	@ (8005d28 <xTaskGetSchedulerState+0x38>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	607b      	str	r3, [r7, #4]
 8005d10:	e001      	b.n	8005d16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d12:	2300      	movs	r3, #0
 8005d14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d16:	687b      	ldr	r3, [r7, #4]
	}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	20000cf8 	.word	0x20000cf8
 8005d28:	20000d14 	.word	0x20000d14

08005d2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d058      	beq.n	8005df4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d42:	4b2f      	ldr	r3, [pc, #188]	@ (8005e00 <xTaskPriorityDisinherit+0xd4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d00b      	beq.n	8005d64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	60fb      	str	r3, [r7, #12]
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	60bb      	str	r3, [r7, #8]
}
 8005d7e:	bf00      	nop
 8005d80:	bf00      	nop
 8005d82:	e7fd      	b.n	8005d80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d88:	1e5a      	subs	r2, r3, #1
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d02c      	beq.n	8005df4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d128      	bne.n	8005df4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	3304      	adds	r3, #4
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fc18 	bl	80045dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <xTaskPriorityDisinherit+0xd8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d903      	bls.n	8005dd4 <xTaskPriorityDisinherit+0xa8>
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8005e04 <xTaskPriorityDisinherit+0xd8>)
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4a09      	ldr	r2, [pc, #36]	@ (8005e08 <xTaskPriorityDisinherit+0xdc>)
 8005de2:	441a      	add	r2, r3
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f7fe fb99 	bl	8004522 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005df4:	697b      	ldr	r3, [r7, #20]
	}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000818 	.word	0x20000818
 8005e04:	20000cf4 	.word	0x20000cf4
 8005e08:	2000081c 	.word	0x2000081c

08005e0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e16:	4b21      	ldr	r3, [pc, #132]	@ (8005e9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e1c:	4b20      	ldr	r3, [pc, #128]	@ (8005ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fe fbda 	bl	80045dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2e:	d10a      	bne.n	8005e46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e36:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4819      	ldr	r0, [pc, #100]	@ (8005ea4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e40:	f7fe fb6f 	bl	8004522 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e44:	e026      	b.n	8005e94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e4e:	4b14      	ldr	r3, [pc, #80]	@ (8005ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d209      	bcs.n	8005e72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f7fe fb7d 	bl	800456a <vListInsert>
}
 8005e70:	e010      	b.n	8005e94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e72:	4b0e      	ldr	r3, [pc, #56]	@ (8005eac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7fe fb73 	bl	800456a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e84:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d202      	bcs.n	8005e94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e8e:	4a08      	ldr	r2, [pc, #32]	@ (8005eb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000cf0 	.word	0x20000cf0
 8005ea0:	20000818 	.word	0x20000818
 8005ea4:	20000cd8 	.word	0x20000cd8
 8005ea8:	20000ca8 	.word	0x20000ca8
 8005eac:	20000ca4 	.word	0x20000ca4
 8005eb0:	20000d0c 	.word	0x20000d0c

08005eb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	@ 0x28
 8005eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ebe:	f000 fb13 	bl	80064e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f38 <xTimerCreateTimerTask+0x84>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d021      	beq.n	8005f0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ed2:	1d3a      	adds	r2, r7, #4
 8005ed4:	f107 0108 	add.w	r1, r7, #8
 8005ed8:	f107 030c 	add.w	r3, r7, #12
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fad9 	bl	8004494 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	9202      	str	r2, [sp, #8]
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	2302      	movs	r3, #2
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	4911      	ldr	r1, [pc, #68]	@ (8005f3c <xTimerCreateTimerTask+0x88>)
 8005ef6:	4812      	ldr	r0, [pc, #72]	@ (8005f40 <xTimerCreateTimerTask+0x8c>)
 8005ef8:	f7ff f8d0 	bl	800509c <xTaskCreateStatic>
 8005efc:	4603      	mov	r3, r0
 8005efe:	4a11      	ldr	r2, [pc, #68]	@ (8005f44 <xTimerCreateTimerTask+0x90>)
 8005f00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f02:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <xTimerCreateTimerTask+0x90>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	613b      	str	r3, [r7, #16]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f2c:	697b      	ldr	r3, [r7, #20]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000d48 	.word	0x20000d48
 8005f3c:	0800781c 	.word	0x0800781c
 8005f40:	08006081 	.word	0x08006081
 8005f44:	20000d4c 	.word	0x20000d4c

08005f48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	@ 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	623b      	str	r3, [r7, #32]
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f78:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <xTimerGenericCommand+0x98>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d02a      	beq.n	8005fd6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	dc18      	bgt.n	8005fc4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f92:	f7ff fead 	bl	8005cf0 <xTaskGetSchedulerState>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d109      	bne.n	8005fb0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f9c:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <xTimerGenericCommand+0x98>)
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	f107 0110 	add.w	r1, r7, #16
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa8:	f7fe fc88 	bl	80048bc <xQueueGenericSend>
 8005fac:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fae:	e012      	b.n	8005fd6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <xTimerGenericCommand+0x98>)
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	f107 0110 	add.w	r1, r7, #16
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f7fe fc7e 	bl	80048bc <xQueueGenericSend>
 8005fc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005fc2:	e008      	b.n	8005fd6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005fc4:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <xTimerGenericCommand+0x98>)
 8005fc6:	6818      	ldr	r0, [r3, #0]
 8005fc8:	f107 0110 	add.w	r1, r7, #16
 8005fcc:	2300      	movs	r3, #0
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	f7fe fd76 	bl	8004ac0 <xQueueGenericSendFromISR>
 8005fd4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3728      	adds	r7, #40	@ 0x28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000d48 	.word	0x20000d48

08005fe4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fee:	4b23      	ldr	r3, [pc, #140]	@ (800607c <prvProcessExpiredTimer+0x98>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe faed 	bl	80045dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d023      	beq.n	8006058 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	699a      	ldr	r2, [r3, #24]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	18d1      	adds	r1, r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	6978      	ldr	r0, [r7, #20]
 800601e:	f000 f8d5 	bl	80061cc <prvInsertTimerInActiveList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d020      	beq.n	800606a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006028:	2300      	movs	r3, #0
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2300      	movs	r3, #0
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	2100      	movs	r1, #0
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f7ff ff88 	bl	8005f48 <xTimerGenericCommand>
 8006038:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d114      	bne.n	800606a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	60fb      	str	r3, [r7, #12]
}
 8006052:	bf00      	nop
 8006054:	bf00      	nop
 8006056:	e7fd      	b.n	8006054 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800605e:	f023 0301 	bic.w	r3, r3, #1
 8006062:	b2da      	uxtb	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	4798      	blx	r3
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000d40 	.word	0x20000d40

08006080 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006088:	f107 0308 	add.w	r3, r7, #8
 800608c:	4618      	mov	r0, r3
 800608e:	f000 f859 	bl	8006144 <prvGetNextExpireTime>
 8006092:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4619      	mov	r1, r3
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f805 	bl	80060a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800609e:	f000 f8d7 	bl	8006250 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060a2:	bf00      	nop
 80060a4:	e7f0      	b.n	8006088 <prvTimerTask+0x8>
	...

080060a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80060b2:	f7ff fa37 	bl	8005524 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060b6:	f107 0308 	add.w	r3, r7, #8
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 f866 	bl	800618c <prvSampleTimeNow>
 80060c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d130      	bne.n	800612a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <prvProcessTimerOrBlockTask+0x3c>
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d806      	bhi.n	80060e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060d6:	f7ff fa33 	bl	8005540 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff ff81 	bl	8005fe4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060e2:	e024      	b.n	800612e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d008      	beq.n	80060fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060ea:	4b13      	ldr	r3, [pc, #76]	@ (8006138 <prvProcessTimerOrBlockTask+0x90>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <prvProcessTimerOrBlockTask+0x50>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <prvProcessTimerOrBlockTask+0x52>
 80060f8:	2300      	movs	r3, #0
 80060fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060fc:	4b0f      	ldr	r3, [pc, #60]	@ (800613c <prvProcessTimerOrBlockTask+0x94>)
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	4619      	mov	r1, r3
 800610a:	f7fe ff93 	bl	8005034 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800610e:	f7ff fa17 	bl	8005540 <xTaskResumeAll>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10a      	bne.n	800612e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006118:	4b09      	ldr	r3, [pc, #36]	@ (8006140 <prvProcessTimerOrBlockTask+0x98>)
 800611a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	f3bf 8f6f 	isb	sy
}
 8006128:	e001      	b.n	800612e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800612a:	f7ff fa09 	bl	8005540 <xTaskResumeAll>
}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000d44 	.word	0x20000d44
 800613c:	20000d48 	.word	0x20000d48
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800614c:	4b0e      	ldr	r3, [pc, #56]	@ (8006188 <prvGetNextExpireTime+0x44>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <prvGetNextExpireTime+0x16>
 8006156:	2201      	movs	r2, #1
 8006158:	e000      	b.n	800615c <prvGetNextExpireTime+0x18>
 800615a:	2200      	movs	r2, #0
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d105      	bne.n	8006174 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006168:	4b07      	ldr	r3, [pc, #28]	@ (8006188 <prvGetNextExpireTime+0x44>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	e001      	b.n	8006178 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006178:	68fb      	ldr	r3, [r7, #12]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000d40 	.word	0x20000d40

0800618c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006194:	f7ff fa72 	bl	800567c <xTaskGetTickCount>
 8006198:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800619a:	4b0b      	ldr	r3, [pc, #44]	@ (80061c8 <prvSampleTimeNow+0x3c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d205      	bcs.n	80061b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061a4:	f000 f93a 	bl	800641c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e002      	b.n	80061b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80061b6:	4a04      	ldr	r2, [pc, #16]	@ (80061c8 <prvSampleTimeNow+0x3c>)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80061bc:	68fb      	ldr	r3, [r7, #12]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000d50 	.word	0x20000d50

080061cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
 80061d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d812      	bhi.n	8006218 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	1ad2      	subs	r2, r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d302      	bcc.n	8006206 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e01b      	b.n	800623e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006206:	4b10      	ldr	r3, [pc, #64]	@ (8006248 <prvInsertTimerInActiveList+0x7c>)
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7fe f9aa 	bl	800456a <vListInsert>
 8006216:	e012      	b.n	800623e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d206      	bcs.n	800622e <prvInsertTimerInActiveList+0x62>
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d302      	bcc.n	800622e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006228:	2301      	movs	r3, #1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e007      	b.n	800623e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800622e:	4b07      	ldr	r3, [pc, #28]	@ (800624c <prvInsertTimerInActiveList+0x80>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f7fe f996 	bl	800456a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800623e:	697b      	ldr	r3, [r7, #20]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000d44 	.word	0x20000d44
 800624c:	20000d40 	.word	0x20000d40

08006250 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08e      	sub	sp, #56	@ 0x38
 8006254:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006256:	e0ce      	b.n	80063f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	da19      	bge.n	8006292 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	3304      	adds	r3, #4
 8006262:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	61fb      	str	r3, [r7, #28]
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	e7fd      	b.n	800627e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006288:	6850      	ldr	r0, [r2, #4]
 800628a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800628c:	6892      	ldr	r2, [r2, #8]
 800628e:	4611      	mov	r1, r2
 8006290:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f2c0 80ae 	blt.w	80063f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800629e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d004      	beq.n	80062b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	3304      	adds	r3, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f996 	bl	80045dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062b0:	463b      	mov	r3, r7
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff ff6a 	bl	800618c <prvSampleTimeNow>
 80062b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b09      	cmp	r3, #9
 80062be:	f200 8097 	bhi.w	80063f0 <prvProcessReceivedCommands+0x1a0>
 80062c2:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <prvProcessReceivedCommands+0x78>)
 80062c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f1 	.word	0x080062f1
 80062d4:	08006367 	.word	0x08006367
 80062d8:	0800637b 	.word	0x0800637b
 80062dc:	080063c7 	.word	0x080063c7
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	080062f1 	.word	0x080062f1
 80062e8:	08006367 	.word	0x08006367
 80062ec:	0800637b 	.word	0x0800637b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f6:	f043 0301 	orr.w	r3, r3, #1
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	18d1      	adds	r1, r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006310:	f7ff ff5c 	bl	80061cc <prvInsertTimerInActiveList>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d06c      	beq.n	80063f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006320:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d061      	beq.n	80063f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	441a      	add	r2, r3
 8006338:	2300      	movs	r3, #0
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	2300      	movs	r3, #0
 800633e:	2100      	movs	r1, #0
 8006340:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006342:	f7ff fe01 	bl	8005f48 <xTimerGenericCommand>
 8006346:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d152      	bne.n	80063f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	61bb      	str	r3, [r7, #24]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006368:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800636c:	f023 0301 	bic.w	r3, r3, #1
 8006370:	b2da      	uxtb	r2, r3
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006378:	e03d      	b.n	80063f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800637a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006380:	f043 0301 	orr.w	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006390:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10b      	bne.n	80063b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	617b      	str	r3, [r7, #20]
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	e7fd      	b.n	80063ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b8:	18d1      	adds	r1, r2, r3
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063c0:	f7ff ff04 	bl	80061cc <prvInsertTimerInActiveList>
					break;
 80063c4:	e017      	b.n	80063f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80063d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063d6:	f000 fbe7 	bl	8006ba8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063da:	e00c      	b.n	80063f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063ee:	e002      	b.n	80063f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80063f0:	bf00      	nop
 80063f2:	e000      	b.n	80063f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80063f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063f6:	4b08      	ldr	r3, [pc, #32]	@ (8006418 <prvProcessReceivedCommands+0x1c8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	1d39      	adds	r1, r7, #4
 80063fc:	2200      	movs	r2, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fbfc 	bl	8004bfc <xQueueReceive>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	f47f af26 	bne.w	8006258 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	3730      	adds	r7, #48	@ 0x30
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20000d48 	.word	0x20000d48

0800641c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006422:	e049      	b.n	80064b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006424:	4b2e      	ldr	r3, [pc, #184]	@ (80064e0 <prvSwitchTimerLists+0xc4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800642e:	4b2c      	ldr	r3, [pc, #176]	@ (80064e0 <prvSwitchTimerLists+0xc4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3304      	adds	r3, #4
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe f8cd 	bl	80045dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02f      	beq.n	80064b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4413      	add	r3, r2
 8006460:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	429a      	cmp	r2, r3
 8006468:	d90e      	bls.n	8006488 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006476:	4b1a      	ldr	r3, [pc, #104]	@ (80064e0 <prvSwitchTimerLists+0xc4>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f7fe f872 	bl	800456a <vListInsert>
 8006486:	e017      	b.n	80064b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006488:	2300      	movs	r3, #0
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	2300      	movs	r3, #0
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	2100      	movs	r1, #0
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff fd58 	bl	8005f48 <xTimerGenericCommand>
 8006498:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	603b      	str	r3, [r7, #0]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064b8:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <prvSwitchTimerLists+0xc4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1b0      	bne.n	8006424 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80064c2:	4b07      	ldr	r3, [pc, #28]	@ (80064e0 <prvSwitchTimerLists+0xc4>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80064c8:	4b06      	ldr	r3, [pc, #24]	@ (80064e4 <prvSwitchTimerLists+0xc8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a04      	ldr	r2, [pc, #16]	@ (80064e0 <prvSwitchTimerLists+0xc4>)
 80064ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80064d0:	4a04      	ldr	r2, [pc, #16]	@ (80064e4 <prvSwitchTimerLists+0xc8>)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6013      	str	r3, [r2, #0]
}
 80064d6:	bf00      	nop
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000d40 	.word	0x20000d40
 80064e4:	20000d44 	.word	0x20000d44

080064e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ee:	f000 f96b 	bl	80067c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064f2:	4b15      	ldr	r3, [pc, #84]	@ (8006548 <prvCheckForValidListAndQueue+0x60>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d120      	bne.n	800653c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064fa:	4814      	ldr	r0, [pc, #80]	@ (800654c <prvCheckForValidListAndQueue+0x64>)
 80064fc:	f7fd ffe4 	bl	80044c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006500:	4813      	ldr	r0, [pc, #76]	@ (8006550 <prvCheckForValidListAndQueue+0x68>)
 8006502:	f7fd ffe1 	bl	80044c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006506:	4b13      	ldr	r3, [pc, #76]	@ (8006554 <prvCheckForValidListAndQueue+0x6c>)
 8006508:	4a10      	ldr	r2, [pc, #64]	@ (800654c <prvCheckForValidListAndQueue+0x64>)
 800650a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800650c:	4b12      	ldr	r3, [pc, #72]	@ (8006558 <prvCheckForValidListAndQueue+0x70>)
 800650e:	4a10      	ldr	r2, [pc, #64]	@ (8006550 <prvCheckForValidListAndQueue+0x68>)
 8006510:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006512:	2300      	movs	r3, #0
 8006514:	9300      	str	r3, [sp, #0]
 8006516:	4b11      	ldr	r3, [pc, #68]	@ (800655c <prvCheckForValidListAndQueue+0x74>)
 8006518:	4a11      	ldr	r2, [pc, #68]	@ (8006560 <prvCheckForValidListAndQueue+0x78>)
 800651a:	2110      	movs	r1, #16
 800651c:	200a      	movs	r0, #10
 800651e:	f7fe f8f1 	bl	8004704 <xQueueGenericCreateStatic>
 8006522:	4603      	mov	r3, r0
 8006524:	4a08      	ldr	r2, [pc, #32]	@ (8006548 <prvCheckForValidListAndQueue+0x60>)
 8006526:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006528:	4b07      	ldr	r3, [pc, #28]	@ (8006548 <prvCheckForValidListAndQueue+0x60>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d005      	beq.n	800653c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <prvCheckForValidListAndQueue+0x60>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	490b      	ldr	r1, [pc, #44]	@ (8006564 <prvCheckForValidListAndQueue+0x7c>)
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fd52 	bl	8004fe0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800653c:	f000 f976 	bl	800682c <vPortExitCritical>
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000d48 	.word	0x20000d48
 800654c:	20000d18 	.word	0x20000d18
 8006550:	20000d2c 	.word	0x20000d2c
 8006554:	20000d40 	.word	0x20000d40
 8006558:	20000d44 	.word	0x20000d44
 800655c:	20000df4 	.word	0x20000df4
 8006560:	20000d54 	.word	0x20000d54
 8006564:	08007824 	.word	0x08007824

08006568 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3b04      	subs	r3, #4
 8006578:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3b04      	subs	r3, #4
 8006586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f023 0201 	bic.w	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3b04      	subs	r3, #4
 8006596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006598:	4a0c      	ldr	r2, [pc, #48]	@ (80065cc <pxPortInitialiseStack+0x64>)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3b14      	subs	r3, #20
 80065a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3b04      	subs	r3, #4
 80065ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f06f 0202 	mvn.w	r2, #2
 80065b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3b20      	subs	r3, #32
 80065bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	080065d1 	.word	0x080065d1

080065d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065da:	4b13      	ldr	r3, [pc, #76]	@ (8006628 <prvTaskExitError+0x58>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d00b      	beq.n	80065fc <prvTaskExitError+0x2c>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	60fb      	str	r3, [r7, #12]
}
 80065f6:	bf00      	nop
 80065f8:	bf00      	nop
 80065fa:	e7fd      	b.n	80065f8 <prvTaskExitError+0x28>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	60bb      	str	r3, [r7, #8]
}
 800660e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006610:	bf00      	nop
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d0fc      	beq.n	8006612 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	2000000c 	.word	0x2000000c
 800662c:	00000000 	.word	0x00000000

08006630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006630:	4b07      	ldr	r3, [pc, #28]	@ (8006650 <pxCurrentTCBConst2>)
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6808      	ldr	r0, [r1, #0]
 8006636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663a:	f380 8809 	msr	PSP, r0
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f380 8811 	msr	BASEPRI, r0
 800664a:	4770      	bx	lr
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst2>:
 8006650:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006658:	4808      	ldr	r0, [pc, #32]	@ (800667c <prvPortStartFirstTask+0x24>)
 800665a:	6800      	ldr	r0, [r0, #0]
 800665c:	6800      	ldr	r0, [r0, #0]
 800665e:	f380 8808 	msr	MSP, r0
 8006662:	f04f 0000 	mov.w	r0, #0
 8006666:	f380 8814 	msr	CONTROL, r0
 800666a:	b662      	cpsie	i
 800666c:	b661      	cpsie	f
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	df00      	svc	0
 8006678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800667a:	bf00      	nop
 800667c:	e000ed08 	.word	0xe000ed08

08006680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006686:	4b47      	ldr	r3, [pc, #284]	@ (80067a4 <xPortStartScheduler+0x124>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a47      	ldr	r2, [pc, #284]	@ (80067a8 <xPortStartScheduler+0x128>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d10b      	bne.n	80066a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	613b      	str	r3, [r7, #16]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066a8:	4b3e      	ldr	r3, [pc, #248]	@ (80067a4 <xPortStartScheduler+0x124>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a3f      	ldr	r2, [pc, #252]	@ (80067ac <xPortStartScheduler+0x12c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10b      	bne.n	80066ca <xPortStartScheduler+0x4a>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60fb      	str	r3, [r7, #12]
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop
 80066c8:	e7fd      	b.n	80066c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80066ca:	4b39      	ldr	r3, [pc, #228]	@ (80067b0 <xPortStartScheduler+0x130>)
 80066cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	22ff      	movs	r2, #255	@ 0xff
 80066da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	4b31      	ldr	r3, [pc, #196]	@ (80067b4 <xPortStartScheduler+0x134>)
 80066f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066f2:	4b31      	ldr	r3, [pc, #196]	@ (80067b8 <xPortStartScheduler+0x138>)
 80066f4:	2207      	movs	r2, #7
 80066f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066f8:	e009      	b.n	800670e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80066fa:	4b2f      	ldr	r3, [pc, #188]	@ (80067b8 <xPortStartScheduler+0x138>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3b01      	subs	r3, #1
 8006700:	4a2d      	ldr	r2, [pc, #180]	@ (80067b8 <xPortStartScheduler+0x138>)
 8006702:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	b2db      	uxtb	r3, r3
 800670c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b80      	cmp	r3, #128	@ 0x80
 8006718:	d0ef      	beq.n	80066fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800671a:	4b27      	ldr	r3, [pc, #156]	@ (80067b8 <xPortStartScheduler+0x138>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f1c3 0307 	rsb	r3, r3, #7
 8006722:	2b04      	cmp	r3, #4
 8006724:	d00b      	beq.n	800673e <xPortStartScheduler+0xbe>
	__asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	60bb      	str	r3, [r7, #8]
}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	e7fd      	b.n	800673a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800673e:	4b1e      	ldr	r3, [pc, #120]	@ (80067b8 <xPortStartScheduler+0x138>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	4a1c      	ldr	r2, [pc, #112]	@ (80067b8 <xPortStartScheduler+0x138>)
 8006746:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006748:	4b1b      	ldr	r3, [pc, #108]	@ (80067b8 <xPortStartScheduler+0x138>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006750:	4a19      	ldr	r2, [pc, #100]	@ (80067b8 <xPortStartScheduler+0x138>)
 8006752:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800675c:	4b17      	ldr	r3, [pc, #92]	@ (80067bc <xPortStartScheduler+0x13c>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a16      	ldr	r2, [pc, #88]	@ (80067bc <xPortStartScheduler+0x13c>)
 8006762:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006766:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006768:	4b14      	ldr	r3, [pc, #80]	@ (80067bc <xPortStartScheduler+0x13c>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a13      	ldr	r2, [pc, #76]	@ (80067bc <xPortStartScheduler+0x13c>)
 800676e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006772:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006774:	f000 f8da 	bl	800692c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006778:	4b11      	ldr	r3, [pc, #68]	@ (80067c0 <xPortStartScheduler+0x140>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800677e:	f000 f8f9 	bl	8006974 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006782:	4b10      	ldr	r3, [pc, #64]	@ (80067c4 <xPortStartScheduler+0x144>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a0f      	ldr	r2, [pc, #60]	@ (80067c4 <xPortStartScheduler+0x144>)
 8006788:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800678c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800678e:	f7ff ff63 	bl	8006658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006792:	f7ff f83d 	bl	8005810 <vTaskSwitchContext>
	prvTaskExitError();
 8006796:	f7ff ff1b 	bl	80065d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	e000ed00 	.word	0xe000ed00
 80067a8:	410fc271 	.word	0x410fc271
 80067ac:	410fc270 	.word	0x410fc270
 80067b0:	e000e400 	.word	0xe000e400
 80067b4:	20000e44 	.word	0x20000e44
 80067b8:	20000e48 	.word	0x20000e48
 80067bc:	e000ed20 	.word	0xe000ed20
 80067c0:	2000000c 	.word	0x2000000c
 80067c4:	e000ef34 	.word	0xe000ef34

080067c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	607b      	str	r3, [r7, #4]
}
 80067e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80067e2:	4b10      	ldr	r3, [pc, #64]	@ (8006824 <vPortEnterCritical+0x5c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	4a0e      	ldr	r2, [pc, #56]	@ (8006824 <vPortEnterCritical+0x5c>)
 80067ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <vPortEnterCritical+0x5c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d110      	bne.n	8006816 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006828 <vPortEnterCritical+0x60>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <vPortEnterCritical+0x4e>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	603b      	str	r3, [r7, #0]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <vPortEnterCritical+0x4a>
	}
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	2000000c 	.word	0x2000000c
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006832:	4b12      	ldr	r3, [pc, #72]	@ (800687c <vPortExitCritical+0x50>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10b      	bne.n	8006852 <vPortExitCritical+0x26>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	607b      	str	r3, [r7, #4]
}
 800684c:	bf00      	nop
 800684e:	bf00      	nop
 8006850:	e7fd      	b.n	800684e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006852:	4b0a      	ldr	r3, [pc, #40]	@ (800687c <vPortExitCritical+0x50>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3b01      	subs	r3, #1
 8006858:	4a08      	ldr	r2, [pc, #32]	@ (800687c <vPortExitCritical+0x50>)
 800685a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800685c:	4b07      	ldr	r3, [pc, #28]	@ (800687c <vPortExitCritical+0x50>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <vPortExitCritical+0x44>
 8006864:	2300      	movs	r3, #0
 8006866:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	2000000c 	.word	0x2000000c

08006880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006880:	f3ef 8009 	mrs	r0, PSP
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	4b15      	ldr	r3, [pc, #84]	@ (80068e0 <pxCurrentTCBConst>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	f01e 0f10 	tst.w	lr, #16
 8006890:	bf08      	it	eq
 8006892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689a:	6010      	str	r0, [r2, #0]
 800689c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068a4:	f380 8811 	msr	BASEPRI, r0
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f7fe ffae 	bl	8005810 <vTaskSwitchContext>
 80068b4:	f04f 0000 	mov.w	r0, #0
 80068b8:	f380 8811 	msr	BASEPRI, r0
 80068bc:	bc09      	pop	{r0, r3}
 80068be:	6819      	ldr	r1, [r3, #0]
 80068c0:	6808      	ldr	r0, [r1, #0]
 80068c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c6:	f01e 0f10 	tst.w	lr, #16
 80068ca:	bf08      	it	eq
 80068cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80068d0:	f380 8809 	msr	PSP, r0
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	f3af 8000 	nop.w

080068e0 <pxCurrentTCBConst>:
 80068e0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
	__asm volatile
 80068ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f2:	f383 8811 	msr	BASEPRI, r3
 80068f6:	f3bf 8f6f 	isb	sy
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	607b      	str	r3, [r7, #4]
}
 8006900:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006902:	f7fe fecb 	bl	800569c <xTaskIncrementTick>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800690c:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <xPortSysTickHandler+0x40>)
 800690e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	2300      	movs	r3, #0
 8006916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	f383 8811 	msr	BASEPRI, r3
}
 800691e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006920:	bf00      	nop
 8006922:	3708      	adds	r7, #8
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	e000ed04 	.word	0xe000ed04

0800692c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006930:	4b0b      	ldr	r3, [pc, #44]	@ (8006960 <vPortSetupTimerInterrupt+0x34>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006936:	4b0b      	ldr	r3, [pc, #44]	@ (8006964 <vPortSetupTimerInterrupt+0x38>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800693c:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <vPortSetupTimerInterrupt+0x3c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0a      	ldr	r2, [pc, #40]	@ (800696c <vPortSetupTimerInterrupt+0x40>)
 8006942:	fba2 2303 	umull	r2, r3, r2, r3
 8006946:	099b      	lsrs	r3, r3, #6
 8006948:	4a09      	ldr	r2, [pc, #36]	@ (8006970 <vPortSetupTimerInterrupt+0x44>)
 800694a:	3b01      	subs	r3, #1
 800694c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800694e:	4b04      	ldr	r3, [pc, #16]	@ (8006960 <vPortSetupTimerInterrupt+0x34>)
 8006950:	2207      	movs	r2, #7
 8006952:	601a      	str	r2, [r3, #0]
}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	e000e010 	.word	0xe000e010
 8006964:	e000e018 	.word	0xe000e018
 8006968:	20000000 	.word	0x20000000
 800696c:	10624dd3 	.word	0x10624dd3
 8006970:	e000e014 	.word	0xe000e014

08006974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006984 <vPortEnableVFP+0x10>
 8006978:	6801      	ldr	r1, [r0, #0]
 800697a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800697e:	6001      	str	r1, [r0, #0]
 8006980:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006982:	bf00      	nop
 8006984:	e000ed88 	.word	0xe000ed88

08006988 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800698e:	f3ef 8305 	mrs	r3, IPSR
 8006992:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b0f      	cmp	r3, #15
 8006998:	d915      	bls.n	80069c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800699a:	4a18      	ldr	r2, [pc, #96]	@ (80069fc <vPortValidateInterruptPriority+0x74>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069a4:	4b16      	ldr	r3, [pc, #88]	@ (8006a00 <vPortValidateInterruptPriority+0x78>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	7afa      	ldrb	r2, [r7, #11]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d20b      	bcs.n	80069c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	607b      	str	r3, [r7, #4]
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	e7fd      	b.n	80069c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80069c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006a04 <vPortValidateInterruptPriority+0x7c>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006a08 <vPortValidateInterruptPriority+0x80>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d90b      	bls.n	80069ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80069d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	603b      	str	r3, [r7, #0]
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	e7fd      	b.n	80069ea <vPortValidateInterruptPriority+0x62>
	}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	e000e3f0 	.word	0xe000e3f0
 8006a00:	20000e44 	.word	0x20000e44
 8006a04:	e000ed0c 	.word	0xe000ed0c
 8006a08:	20000e48 	.word	0x20000e48

08006a0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08a      	sub	sp, #40	@ 0x28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a14:	2300      	movs	r3, #0
 8006a16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a18:	f7fe fd84 	bl	8005524 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006b90 <pvPortMalloc+0x184>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a24:	f000 f924 	bl	8006c70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a28:	4b5a      	ldr	r3, [pc, #360]	@ (8006b94 <pvPortMalloc+0x188>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f040 8095 	bne.w	8006b60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d01e      	beq.n	8006a7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d015      	beq.n	8006a7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f023 0307 	bic.w	r3, r3, #7
 8006a54:	3308      	adds	r3, #8
 8006a56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <pvPortMalloc+0x6e>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	617b      	str	r3, [r7, #20]
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	e7fd      	b.n	8006a76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d06f      	beq.n	8006b60 <pvPortMalloc+0x154>
 8006a80:	4b45      	ldr	r3, [pc, #276]	@ (8006b98 <pvPortMalloc+0x18c>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d86a      	bhi.n	8006b60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a8a:	4b44      	ldr	r3, [pc, #272]	@ (8006b9c <pvPortMalloc+0x190>)
 8006a8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a8e:	4b43      	ldr	r3, [pc, #268]	@ (8006b9c <pvPortMalloc+0x190>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a94:	e004      	b.n	8006aa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d903      	bls.n	8006ab2 <pvPortMalloc+0xa6>
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f1      	bne.n	8006a96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ab2:	4b37      	ldr	r3, [pc, #220]	@ (8006b90 <pvPortMalloc+0x184>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d051      	beq.n	8006b60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	4413      	add	r3, r2
 8006ac4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	1ad2      	subs	r2, r2, r3
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d920      	bls.n	8006b20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <pvPortMalloc+0xfc>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	613b      	str	r3, [r7, #16]
}
 8006b02:	bf00      	nop
 8006b04:	bf00      	nop
 8006b06:	e7fd      	b.n	8006b04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b1a:	69b8      	ldr	r0, [r7, #24]
 8006b1c:	f000 f90a 	bl	8006d34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b20:	4b1d      	ldr	r3, [pc, #116]	@ (8006b98 <pvPortMalloc+0x18c>)
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006b98 <pvPortMalloc+0x18c>)
 8006b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006b98 <pvPortMalloc+0x18c>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba0 <pvPortMalloc+0x194>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d203      	bcs.n	8006b42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b3a:	4b17      	ldr	r3, [pc, #92]	@ (8006b98 <pvPortMalloc+0x18c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	@ (8006ba0 <pvPortMalloc+0x194>)
 8006b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	685a      	ldr	r2, [r3, #4]
 8006b46:	4b13      	ldr	r3, [pc, #76]	@ (8006b94 <pvPortMalloc+0x188>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b52:	2200      	movs	r2, #0
 8006b54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b56:	4b13      	ldr	r3, [pc, #76]	@ (8006ba4 <pvPortMalloc+0x198>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	4a11      	ldr	r2, [pc, #68]	@ (8006ba4 <pvPortMalloc+0x198>)
 8006b5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b60:	f7fe fcee 	bl	8005540 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <pvPortMalloc+0x17a>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	60fb      	str	r3, [r7, #12]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <pvPortMalloc+0x176>
	return pvReturn;
 8006b86:	69fb      	ldr	r3, [r7, #28]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3728      	adds	r7, #40	@ 0x28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20001a0c 	.word	0x20001a0c
 8006b94:	20001a20 	.word	0x20001a20
 8006b98:	20001a10 	.word	0x20001a10
 8006b9c:	20001a04 	.word	0x20001a04
 8006ba0:	20001a14 	.word	0x20001a14
 8006ba4:	20001a18 	.word	0x20001a18

08006ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d04f      	beq.n	8006c5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006bba:	2308      	movs	r3, #8
 8006bbc:	425b      	negs	r3, r3
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4b25      	ldr	r3, [pc, #148]	@ (8006c64 <vPortFree+0xbc>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10b      	bne.n	8006bee <vPortFree+0x46>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	60fb      	str	r3, [r7, #12]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <vPortFree+0x66>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60bb      	str	r3, [r7, #8]
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	e7fd      	b.n	8006c0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	4b14      	ldr	r3, [pc, #80]	@ (8006c64 <vPortFree+0xbc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01e      	beq.n	8006c5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d11a      	bne.n	8006c5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	4b0e      	ldr	r3, [pc, #56]	@ (8006c64 <vPortFree+0xbc>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	401a      	ands	r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c34:	f7fe fc76 	bl	8005524 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <vPortFree+0xc0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4413      	add	r3, r2
 8006c42:	4a09      	ldr	r2, [pc, #36]	@ (8006c68 <vPortFree+0xc0>)
 8006c44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c46:	6938      	ldr	r0, [r7, #16]
 8006c48:	f000 f874 	bl	8006d34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c4c:	4b07      	ldr	r3, [pc, #28]	@ (8006c6c <vPortFree+0xc4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a06      	ldr	r2, [pc, #24]	@ (8006c6c <vPortFree+0xc4>)
 8006c54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c56:	f7fe fc73 	bl	8005540 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c5a:	bf00      	nop
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20001a20 	.word	0x20001a20
 8006c68:	20001a10 	.word	0x20001a10
 8006c6c:	20001a1c 	.word	0x20001a1c

08006c70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c76:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006c7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c7c:	4b27      	ldr	r3, [pc, #156]	@ (8006d1c <prvHeapInit+0xac>)
 8006c7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00c      	beq.n	8006ca4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3307      	adds	r3, #7
 8006c8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0307 	bic.w	r3, r3, #7
 8006c96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8006d1c <prvHeapInit+0xac>)
 8006ca0:	4413      	add	r3, r2
 8006ca2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d20 <prvHeapInit+0xb0>)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cae:	4b1c      	ldr	r3, [pc, #112]	@ (8006d20 <prvHeapInit+0xb0>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	4413      	add	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4a15      	ldr	r2, [pc, #84]	@ (8006d24 <prvHeapInit+0xb4>)
 8006cd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006cd2:	4b14      	ldr	r3, [pc, #80]	@ (8006d24 <prvHeapInit+0xb4>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006cda:	4b12      	ldr	r3, [pc, #72]	@ (8006d24 <prvHeapInit+0xb4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <prvHeapInit+0xb4>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8006d28 <prvHeapInit+0xb8>)
 8006cfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	4a09      	ldr	r2, [pc, #36]	@ (8006d2c <prvHeapInit+0xbc>)
 8006d06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d08:	4b09      	ldr	r3, [pc, #36]	@ (8006d30 <prvHeapInit+0xc0>)
 8006d0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006d0e:	601a      	str	r2, [r3, #0]
}
 8006d10:	bf00      	nop
 8006d12:	3714      	adds	r7, #20
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	20000e4c 	.word	0x20000e4c
 8006d20:	20001a04 	.word	0x20001a04
 8006d24:	20001a0c 	.word	0x20001a0c
 8006d28:	20001a14 	.word	0x20001a14
 8006d2c:	20001a10 	.word	0x20001a10
 8006d30:	20001a20 	.word	0x20001a20

08006d34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d3c:	4b28      	ldr	r3, [pc, #160]	@ (8006de0 <prvInsertBlockIntoFreeList+0xac>)
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	e002      	b.n	8006d48 <prvInsertBlockIntoFreeList+0x14>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d8f7      	bhi.n	8006d42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d108      	bne.n	8006d76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	441a      	add	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	441a      	add	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d118      	bne.n	8006dbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	4b15      	ldr	r3, [pc, #84]	@ (8006de4 <prvInsertBlockIntoFreeList+0xb0>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d00d      	beq.n	8006db2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	441a      	add	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	e008      	b.n	8006dc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006db2:	4b0c      	ldr	r3, [pc, #48]	@ (8006de4 <prvInsertBlockIntoFreeList+0xb0>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	e003      	b.n	8006dc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d002      	beq.n	8006dd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	20001a04 	.word	0x20001a04
 8006de4:	20001a0c 	.word	0x20001a0c

08006de8 <sniprintf>:
 8006de8:	b40c      	push	{r2, r3}
 8006dea:	b530      	push	{r4, r5, lr}
 8006dec:	4b17      	ldr	r3, [pc, #92]	@ (8006e4c <sniprintf+0x64>)
 8006dee:	1e0c      	subs	r4, r1, #0
 8006df0:	681d      	ldr	r5, [r3, #0]
 8006df2:	b09d      	sub	sp, #116	@ 0x74
 8006df4:	da08      	bge.n	8006e08 <sniprintf+0x20>
 8006df6:	238b      	movs	r3, #139	@ 0x8b
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfe:	b01d      	add	sp, #116	@ 0x74
 8006e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e04:	b002      	add	sp, #8
 8006e06:	4770      	bx	lr
 8006e08:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e10:	bf14      	ite	ne
 8006e12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e16:	4623      	moveq	r3, r4
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	9307      	str	r3, [sp, #28]
 8006e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e20:	9002      	str	r0, [sp, #8]
 8006e22:	9006      	str	r0, [sp, #24]
 8006e24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006e2a:	ab21      	add	r3, sp, #132	@ 0x84
 8006e2c:	a902      	add	r1, sp, #8
 8006e2e:	4628      	mov	r0, r5
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	f000 f9b5 	bl	80071a0 <_svfiprintf_r>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	bfbc      	itt	lt
 8006e3a:	238b      	movlt	r3, #139	@ 0x8b
 8006e3c:	602b      	strlt	r3, [r5, #0]
 8006e3e:	2c00      	cmp	r4, #0
 8006e40:	d0dd      	beq.n	8006dfe <sniprintf+0x16>
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	2200      	movs	r2, #0
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	e7d9      	b.n	8006dfe <sniprintf+0x16>
 8006e4a:	bf00      	nop
 8006e4c:	20000010 	.word	0x20000010

08006e50 <memset>:
 8006e50:	4402      	add	r2, r0
 8006e52:	4603      	mov	r3, r0
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d100      	bne.n	8006e5a <memset+0xa>
 8006e58:	4770      	bx	lr
 8006e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e5e:	e7f9      	b.n	8006e54 <memset+0x4>

08006e60 <strncmp>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	b16a      	cbz	r2, 8006e80 <strncmp+0x20>
 8006e64:	3901      	subs	r1, #1
 8006e66:	1884      	adds	r4, r0, r2
 8006e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d103      	bne.n	8006e7c <strncmp+0x1c>
 8006e74:	42a0      	cmp	r0, r4
 8006e76:	d001      	beq.n	8006e7c <strncmp+0x1c>
 8006e78:	2a00      	cmp	r2, #0
 8006e7a:	d1f5      	bne.n	8006e68 <strncmp+0x8>
 8006e7c:	1ad0      	subs	r0, r2, r3
 8006e7e:	bd10      	pop	{r4, pc}
 8006e80:	4610      	mov	r0, r2
 8006e82:	e7fc      	b.n	8006e7e <strncmp+0x1e>

08006e84 <__errno>:
 8006e84:	4b01      	ldr	r3, [pc, #4]	@ (8006e8c <__errno+0x8>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20000010 	.word	0x20000010

08006e90 <__libc_init_array>:
 8006e90:	b570      	push	{r4, r5, r6, lr}
 8006e92:	4d0d      	ldr	r5, [pc, #52]	@ (8006ec8 <__libc_init_array+0x38>)
 8006e94:	4c0d      	ldr	r4, [pc, #52]	@ (8006ecc <__libc_init_array+0x3c>)
 8006e96:	1b64      	subs	r4, r4, r5
 8006e98:	10a4      	asrs	r4, r4, #2
 8006e9a:	2600      	movs	r6, #0
 8006e9c:	42a6      	cmp	r6, r4
 8006e9e:	d109      	bne.n	8006eb4 <__libc_init_array+0x24>
 8006ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8006ed0 <__libc_init_array+0x40>)
 8006ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8006ed4 <__libc_init_array+0x44>)
 8006ea4:	f000 fc66 	bl	8007774 <_init>
 8006ea8:	1b64      	subs	r4, r4, r5
 8006eaa:	10a4      	asrs	r4, r4, #2
 8006eac:	2600      	movs	r6, #0
 8006eae:	42a6      	cmp	r6, r4
 8006eb0:	d105      	bne.n	8006ebe <__libc_init_array+0x2e>
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eb8:	4798      	blx	r3
 8006eba:	3601      	adds	r6, #1
 8006ebc:	e7ee      	b.n	8006e9c <__libc_init_array+0xc>
 8006ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec2:	4798      	blx	r3
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	e7f2      	b.n	8006eae <__libc_init_array+0x1e>
 8006ec8:	0800791c 	.word	0x0800791c
 8006ecc:	0800791c 	.word	0x0800791c
 8006ed0:	0800791c 	.word	0x0800791c
 8006ed4:	08007920 	.word	0x08007920

08006ed8 <__retarget_lock_acquire_recursive>:
 8006ed8:	4770      	bx	lr

08006eda <__retarget_lock_release_recursive>:
 8006eda:	4770      	bx	lr

08006edc <memcpy>:
 8006edc:	440a      	add	r2, r1
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ee4:	d100      	bne.n	8006ee8 <memcpy+0xc>
 8006ee6:	4770      	bx	lr
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	d1f9      	bne.n	8006eea <memcpy+0xe>
 8006ef6:	bd10      	pop	{r4, pc}

08006ef8 <_free_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4605      	mov	r5, r0
 8006efc:	2900      	cmp	r1, #0
 8006efe:	d041      	beq.n	8006f84 <_free_r+0x8c>
 8006f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f04:	1f0c      	subs	r4, r1, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bfb8      	it	lt
 8006f0a:	18e4      	addlt	r4, r4, r3
 8006f0c:	f000 f8e0 	bl	80070d0 <__malloc_lock>
 8006f10:	4a1d      	ldr	r2, [pc, #116]	@ (8006f88 <_free_r+0x90>)
 8006f12:	6813      	ldr	r3, [r2, #0]
 8006f14:	b933      	cbnz	r3, 8006f24 <_free_r+0x2c>
 8006f16:	6063      	str	r3, [r4, #4]
 8006f18:	6014      	str	r4, [r2, #0]
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f20:	f000 b8dc 	b.w	80070dc <__malloc_unlock>
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d908      	bls.n	8006f3a <_free_r+0x42>
 8006f28:	6820      	ldr	r0, [r4, #0]
 8006f2a:	1821      	adds	r1, r4, r0
 8006f2c:	428b      	cmp	r3, r1
 8006f2e:	bf01      	itttt	eq
 8006f30:	6819      	ldreq	r1, [r3, #0]
 8006f32:	685b      	ldreq	r3, [r3, #4]
 8006f34:	1809      	addeq	r1, r1, r0
 8006f36:	6021      	streq	r1, [r4, #0]
 8006f38:	e7ed      	b.n	8006f16 <_free_r+0x1e>
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	b10b      	cbz	r3, 8006f44 <_free_r+0x4c>
 8006f40:	42a3      	cmp	r3, r4
 8006f42:	d9fa      	bls.n	8006f3a <_free_r+0x42>
 8006f44:	6811      	ldr	r1, [r2, #0]
 8006f46:	1850      	adds	r0, r2, r1
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d10b      	bne.n	8006f64 <_free_r+0x6c>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	4401      	add	r1, r0
 8006f50:	1850      	adds	r0, r2, r1
 8006f52:	4283      	cmp	r3, r0
 8006f54:	6011      	str	r1, [r2, #0]
 8006f56:	d1e0      	bne.n	8006f1a <_free_r+0x22>
 8006f58:	6818      	ldr	r0, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	6053      	str	r3, [r2, #4]
 8006f5e:	4408      	add	r0, r1
 8006f60:	6010      	str	r0, [r2, #0]
 8006f62:	e7da      	b.n	8006f1a <_free_r+0x22>
 8006f64:	d902      	bls.n	8006f6c <_free_r+0x74>
 8006f66:	230c      	movs	r3, #12
 8006f68:	602b      	str	r3, [r5, #0]
 8006f6a:	e7d6      	b.n	8006f1a <_free_r+0x22>
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	1821      	adds	r1, r4, r0
 8006f70:	428b      	cmp	r3, r1
 8006f72:	bf04      	itt	eq
 8006f74:	6819      	ldreq	r1, [r3, #0]
 8006f76:	685b      	ldreq	r3, [r3, #4]
 8006f78:	6063      	str	r3, [r4, #4]
 8006f7a:	bf04      	itt	eq
 8006f7c:	1809      	addeq	r1, r1, r0
 8006f7e:	6021      	streq	r1, [r4, #0]
 8006f80:	6054      	str	r4, [r2, #4]
 8006f82:	e7ca      	b.n	8006f1a <_free_r+0x22>
 8006f84:	bd38      	pop	{r3, r4, r5, pc}
 8006f86:	bf00      	nop
 8006f88:	20001b68 	.word	0x20001b68

08006f8c <sbrk_aligned>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	4e0f      	ldr	r6, [pc, #60]	@ (8006fcc <sbrk_aligned+0x40>)
 8006f90:	460c      	mov	r4, r1
 8006f92:	6831      	ldr	r1, [r6, #0]
 8006f94:	4605      	mov	r5, r0
 8006f96:	b911      	cbnz	r1, 8006f9e <sbrk_aligned+0x12>
 8006f98:	f000 fba6 	bl	80076e8 <_sbrk_r>
 8006f9c:	6030      	str	r0, [r6, #0]
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f000 fba1 	bl	80076e8 <_sbrk_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	d103      	bne.n	8006fb2 <sbrk_aligned+0x26>
 8006faa:	f04f 34ff 	mov.w	r4, #4294967295
 8006fae:	4620      	mov	r0, r4
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
 8006fb2:	1cc4      	adds	r4, r0, #3
 8006fb4:	f024 0403 	bic.w	r4, r4, #3
 8006fb8:	42a0      	cmp	r0, r4
 8006fba:	d0f8      	beq.n	8006fae <sbrk_aligned+0x22>
 8006fbc:	1a21      	subs	r1, r4, r0
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f000 fb92 	bl	80076e8 <_sbrk_r>
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d1f2      	bne.n	8006fae <sbrk_aligned+0x22>
 8006fc8:	e7ef      	b.n	8006faa <sbrk_aligned+0x1e>
 8006fca:	bf00      	nop
 8006fcc:	20001b64 	.word	0x20001b64

08006fd0 <_malloc_r>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	1ccd      	adds	r5, r1, #3
 8006fd6:	f025 0503 	bic.w	r5, r5, #3
 8006fda:	3508      	adds	r5, #8
 8006fdc:	2d0c      	cmp	r5, #12
 8006fde:	bf38      	it	cc
 8006fe0:	250c      	movcc	r5, #12
 8006fe2:	2d00      	cmp	r5, #0
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	db01      	blt.n	8006fec <_malloc_r+0x1c>
 8006fe8:	42a9      	cmp	r1, r5
 8006fea:	d904      	bls.n	8006ff6 <_malloc_r+0x26>
 8006fec:	230c      	movs	r3, #12
 8006fee:	6033      	str	r3, [r6, #0]
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070cc <_malloc_r+0xfc>
 8006ffa:	f000 f869 	bl	80070d0 <__malloc_lock>
 8006ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8007002:	461c      	mov	r4, r3
 8007004:	bb44      	cbnz	r4, 8007058 <_malloc_r+0x88>
 8007006:	4629      	mov	r1, r5
 8007008:	4630      	mov	r0, r6
 800700a:	f7ff ffbf 	bl	8006f8c <sbrk_aligned>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	4604      	mov	r4, r0
 8007012:	d158      	bne.n	80070c6 <_malloc_r+0xf6>
 8007014:	f8d8 4000 	ldr.w	r4, [r8]
 8007018:	4627      	mov	r7, r4
 800701a:	2f00      	cmp	r7, #0
 800701c:	d143      	bne.n	80070a6 <_malloc_r+0xd6>
 800701e:	2c00      	cmp	r4, #0
 8007020:	d04b      	beq.n	80070ba <_malloc_r+0xea>
 8007022:	6823      	ldr	r3, [r4, #0]
 8007024:	4639      	mov	r1, r7
 8007026:	4630      	mov	r0, r6
 8007028:	eb04 0903 	add.w	r9, r4, r3
 800702c:	f000 fb5c 	bl	80076e8 <_sbrk_r>
 8007030:	4581      	cmp	r9, r0
 8007032:	d142      	bne.n	80070ba <_malloc_r+0xea>
 8007034:	6821      	ldr	r1, [r4, #0]
 8007036:	1a6d      	subs	r5, r5, r1
 8007038:	4629      	mov	r1, r5
 800703a:	4630      	mov	r0, r6
 800703c:	f7ff ffa6 	bl	8006f8c <sbrk_aligned>
 8007040:	3001      	adds	r0, #1
 8007042:	d03a      	beq.n	80070ba <_malloc_r+0xea>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	442b      	add	r3, r5
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	f8d8 3000 	ldr.w	r3, [r8]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	bb62      	cbnz	r2, 80070ac <_malloc_r+0xdc>
 8007052:	f8c8 7000 	str.w	r7, [r8]
 8007056:	e00f      	b.n	8007078 <_malloc_r+0xa8>
 8007058:	6822      	ldr	r2, [r4, #0]
 800705a:	1b52      	subs	r2, r2, r5
 800705c:	d420      	bmi.n	80070a0 <_malloc_r+0xd0>
 800705e:	2a0b      	cmp	r2, #11
 8007060:	d917      	bls.n	8007092 <_malloc_r+0xc2>
 8007062:	1961      	adds	r1, r4, r5
 8007064:	42a3      	cmp	r3, r4
 8007066:	6025      	str	r5, [r4, #0]
 8007068:	bf18      	it	ne
 800706a:	6059      	strne	r1, [r3, #4]
 800706c:	6863      	ldr	r3, [r4, #4]
 800706e:	bf08      	it	eq
 8007070:	f8c8 1000 	streq.w	r1, [r8]
 8007074:	5162      	str	r2, [r4, r5]
 8007076:	604b      	str	r3, [r1, #4]
 8007078:	4630      	mov	r0, r6
 800707a:	f000 f82f 	bl	80070dc <__malloc_unlock>
 800707e:	f104 000b 	add.w	r0, r4, #11
 8007082:	1d23      	adds	r3, r4, #4
 8007084:	f020 0007 	bic.w	r0, r0, #7
 8007088:	1ac2      	subs	r2, r0, r3
 800708a:	bf1c      	itt	ne
 800708c:	1a1b      	subne	r3, r3, r0
 800708e:	50a3      	strne	r3, [r4, r2]
 8007090:	e7af      	b.n	8006ff2 <_malloc_r+0x22>
 8007092:	6862      	ldr	r2, [r4, #4]
 8007094:	42a3      	cmp	r3, r4
 8007096:	bf0c      	ite	eq
 8007098:	f8c8 2000 	streq.w	r2, [r8]
 800709c:	605a      	strne	r2, [r3, #4]
 800709e:	e7eb      	b.n	8007078 <_malloc_r+0xa8>
 80070a0:	4623      	mov	r3, r4
 80070a2:	6864      	ldr	r4, [r4, #4]
 80070a4:	e7ae      	b.n	8007004 <_malloc_r+0x34>
 80070a6:	463c      	mov	r4, r7
 80070a8:	687f      	ldr	r7, [r7, #4]
 80070aa:	e7b6      	b.n	800701a <_malloc_r+0x4a>
 80070ac:	461a      	mov	r2, r3
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	d1fb      	bne.n	80070ac <_malloc_r+0xdc>
 80070b4:	2300      	movs	r3, #0
 80070b6:	6053      	str	r3, [r2, #4]
 80070b8:	e7de      	b.n	8007078 <_malloc_r+0xa8>
 80070ba:	230c      	movs	r3, #12
 80070bc:	6033      	str	r3, [r6, #0]
 80070be:	4630      	mov	r0, r6
 80070c0:	f000 f80c 	bl	80070dc <__malloc_unlock>
 80070c4:	e794      	b.n	8006ff0 <_malloc_r+0x20>
 80070c6:	6005      	str	r5, [r0, #0]
 80070c8:	e7d6      	b.n	8007078 <_malloc_r+0xa8>
 80070ca:	bf00      	nop
 80070cc:	20001b68 	.word	0x20001b68

080070d0 <__malloc_lock>:
 80070d0:	4801      	ldr	r0, [pc, #4]	@ (80070d8 <__malloc_lock+0x8>)
 80070d2:	f7ff bf01 	b.w	8006ed8 <__retarget_lock_acquire_recursive>
 80070d6:	bf00      	nop
 80070d8:	20001b60 	.word	0x20001b60

080070dc <__malloc_unlock>:
 80070dc:	4801      	ldr	r0, [pc, #4]	@ (80070e4 <__malloc_unlock+0x8>)
 80070de:	f7ff befc 	b.w	8006eda <__retarget_lock_release_recursive>
 80070e2:	bf00      	nop
 80070e4:	20001b60 	.word	0x20001b60

080070e8 <__ssputs_r>:
 80070e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	688e      	ldr	r6, [r1, #8]
 80070ee:	461f      	mov	r7, r3
 80070f0:	42be      	cmp	r6, r7
 80070f2:	680b      	ldr	r3, [r1, #0]
 80070f4:	4682      	mov	sl, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	4690      	mov	r8, r2
 80070fa:	d82d      	bhi.n	8007158 <__ssputs_r+0x70>
 80070fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007100:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007104:	d026      	beq.n	8007154 <__ssputs_r+0x6c>
 8007106:	6965      	ldr	r5, [r4, #20]
 8007108:	6909      	ldr	r1, [r1, #16]
 800710a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800710e:	eba3 0901 	sub.w	r9, r3, r1
 8007112:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007116:	1c7b      	adds	r3, r7, #1
 8007118:	444b      	add	r3, r9
 800711a:	106d      	asrs	r5, r5, #1
 800711c:	429d      	cmp	r5, r3
 800711e:	bf38      	it	cc
 8007120:	461d      	movcc	r5, r3
 8007122:	0553      	lsls	r3, r2, #21
 8007124:	d527      	bpl.n	8007176 <__ssputs_r+0x8e>
 8007126:	4629      	mov	r1, r5
 8007128:	f7ff ff52 	bl	8006fd0 <_malloc_r>
 800712c:	4606      	mov	r6, r0
 800712e:	b360      	cbz	r0, 800718a <__ssputs_r+0xa2>
 8007130:	6921      	ldr	r1, [r4, #16]
 8007132:	464a      	mov	r2, r9
 8007134:	f7ff fed2 	bl	8006edc <memcpy>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800713e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007142:	81a3      	strh	r3, [r4, #12]
 8007144:	6126      	str	r6, [r4, #16]
 8007146:	6165      	str	r5, [r4, #20]
 8007148:	444e      	add	r6, r9
 800714a:	eba5 0509 	sub.w	r5, r5, r9
 800714e:	6026      	str	r6, [r4, #0]
 8007150:	60a5      	str	r5, [r4, #8]
 8007152:	463e      	mov	r6, r7
 8007154:	42be      	cmp	r6, r7
 8007156:	d900      	bls.n	800715a <__ssputs_r+0x72>
 8007158:	463e      	mov	r6, r7
 800715a:	6820      	ldr	r0, [r4, #0]
 800715c:	4632      	mov	r2, r6
 800715e:	4641      	mov	r1, r8
 8007160:	f000 faa8 	bl	80076b4 <memmove>
 8007164:	68a3      	ldr	r3, [r4, #8]
 8007166:	1b9b      	subs	r3, r3, r6
 8007168:	60a3      	str	r3, [r4, #8]
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	4433      	add	r3, r6
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	2000      	movs	r0, #0
 8007172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007176:	462a      	mov	r2, r5
 8007178:	f000 fac6 	bl	8007708 <_realloc_r>
 800717c:	4606      	mov	r6, r0
 800717e:	2800      	cmp	r0, #0
 8007180:	d1e0      	bne.n	8007144 <__ssputs_r+0x5c>
 8007182:	6921      	ldr	r1, [r4, #16]
 8007184:	4650      	mov	r0, sl
 8007186:	f7ff feb7 	bl	8006ef8 <_free_r>
 800718a:	230c      	movs	r3, #12
 800718c:	f8ca 3000 	str.w	r3, [sl]
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	e7e9      	b.n	8007172 <__ssputs_r+0x8a>
	...

080071a0 <_svfiprintf_r>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	4698      	mov	r8, r3
 80071a6:	898b      	ldrh	r3, [r1, #12]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	b09d      	sub	sp, #116	@ 0x74
 80071ac:	4607      	mov	r7, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	4614      	mov	r4, r2
 80071b2:	d510      	bpl.n	80071d6 <_svfiprintf_r+0x36>
 80071b4:	690b      	ldr	r3, [r1, #16]
 80071b6:	b973      	cbnz	r3, 80071d6 <_svfiprintf_r+0x36>
 80071b8:	2140      	movs	r1, #64	@ 0x40
 80071ba:	f7ff ff09 	bl	8006fd0 <_malloc_r>
 80071be:	6028      	str	r0, [r5, #0]
 80071c0:	6128      	str	r0, [r5, #16]
 80071c2:	b930      	cbnz	r0, 80071d2 <_svfiprintf_r+0x32>
 80071c4:	230c      	movs	r3, #12
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	b01d      	add	sp, #116	@ 0x74
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	2340      	movs	r3, #64	@ 0x40
 80071d4:	616b      	str	r3, [r5, #20]
 80071d6:	2300      	movs	r3, #0
 80071d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071da:	2320      	movs	r3, #32
 80071dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071e4:	2330      	movs	r3, #48	@ 0x30
 80071e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007384 <_svfiprintf_r+0x1e4>
 80071ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071ee:	f04f 0901 	mov.w	r9, #1
 80071f2:	4623      	mov	r3, r4
 80071f4:	469a      	mov	sl, r3
 80071f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071fa:	b10a      	cbz	r2, 8007200 <_svfiprintf_r+0x60>
 80071fc:	2a25      	cmp	r2, #37	@ 0x25
 80071fe:	d1f9      	bne.n	80071f4 <_svfiprintf_r+0x54>
 8007200:	ebba 0b04 	subs.w	fp, sl, r4
 8007204:	d00b      	beq.n	800721e <_svfiprintf_r+0x7e>
 8007206:	465b      	mov	r3, fp
 8007208:	4622      	mov	r2, r4
 800720a:	4629      	mov	r1, r5
 800720c:	4638      	mov	r0, r7
 800720e:	f7ff ff6b 	bl	80070e8 <__ssputs_r>
 8007212:	3001      	adds	r0, #1
 8007214:	f000 80a7 	beq.w	8007366 <_svfiprintf_r+0x1c6>
 8007218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800721a:	445a      	add	r2, fp
 800721c:	9209      	str	r2, [sp, #36]	@ 0x24
 800721e:	f89a 3000 	ldrb.w	r3, [sl]
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 809f 	beq.w	8007366 <_svfiprintf_r+0x1c6>
 8007228:	2300      	movs	r3, #0
 800722a:	f04f 32ff 	mov.w	r2, #4294967295
 800722e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007232:	f10a 0a01 	add.w	sl, sl, #1
 8007236:	9304      	str	r3, [sp, #16]
 8007238:	9307      	str	r3, [sp, #28]
 800723a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800723e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007240:	4654      	mov	r4, sl
 8007242:	2205      	movs	r2, #5
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	484e      	ldr	r0, [pc, #312]	@ (8007384 <_svfiprintf_r+0x1e4>)
 800724a:	f7f8 ffc9 	bl	80001e0 <memchr>
 800724e:	9a04      	ldr	r2, [sp, #16]
 8007250:	b9d8      	cbnz	r0, 800728a <_svfiprintf_r+0xea>
 8007252:	06d0      	lsls	r0, r2, #27
 8007254:	bf44      	itt	mi
 8007256:	2320      	movmi	r3, #32
 8007258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800725c:	0711      	lsls	r1, r2, #28
 800725e:	bf44      	itt	mi
 8007260:	232b      	movmi	r3, #43	@ 0x2b
 8007262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007266:	f89a 3000 	ldrb.w	r3, [sl]
 800726a:	2b2a      	cmp	r3, #42	@ 0x2a
 800726c:	d015      	beq.n	800729a <_svfiprintf_r+0xfa>
 800726e:	9a07      	ldr	r2, [sp, #28]
 8007270:	4654      	mov	r4, sl
 8007272:	2000      	movs	r0, #0
 8007274:	f04f 0c0a 	mov.w	ip, #10
 8007278:	4621      	mov	r1, r4
 800727a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800727e:	3b30      	subs	r3, #48	@ 0x30
 8007280:	2b09      	cmp	r3, #9
 8007282:	d94b      	bls.n	800731c <_svfiprintf_r+0x17c>
 8007284:	b1b0      	cbz	r0, 80072b4 <_svfiprintf_r+0x114>
 8007286:	9207      	str	r2, [sp, #28]
 8007288:	e014      	b.n	80072b4 <_svfiprintf_r+0x114>
 800728a:	eba0 0308 	sub.w	r3, r0, r8
 800728e:	fa09 f303 	lsl.w	r3, r9, r3
 8007292:	4313      	orrs	r3, r2
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	46a2      	mov	sl, r4
 8007298:	e7d2      	b.n	8007240 <_svfiprintf_r+0xa0>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	1d19      	adds	r1, r3, #4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	9103      	str	r1, [sp, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	bfbb      	ittet	lt
 80072a6:	425b      	neglt	r3, r3
 80072a8:	f042 0202 	orrlt.w	r2, r2, #2
 80072ac:	9307      	strge	r3, [sp, #28]
 80072ae:	9307      	strlt	r3, [sp, #28]
 80072b0:	bfb8      	it	lt
 80072b2:	9204      	strlt	r2, [sp, #16]
 80072b4:	7823      	ldrb	r3, [r4, #0]
 80072b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80072b8:	d10a      	bne.n	80072d0 <_svfiprintf_r+0x130>
 80072ba:	7863      	ldrb	r3, [r4, #1]
 80072bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80072be:	d132      	bne.n	8007326 <_svfiprintf_r+0x186>
 80072c0:	9b03      	ldr	r3, [sp, #12]
 80072c2:	1d1a      	adds	r2, r3, #4
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	9203      	str	r2, [sp, #12]
 80072c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072cc:	3402      	adds	r4, #2
 80072ce:	9305      	str	r3, [sp, #20]
 80072d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007394 <_svfiprintf_r+0x1f4>
 80072d4:	7821      	ldrb	r1, [r4, #0]
 80072d6:	2203      	movs	r2, #3
 80072d8:	4650      	mov	r0, sl
 80072da:	f7f8 ff81 	bl	80001e0 <memchr>
 80072de:	b138      	cbz	r0, 80072f0 <_svfiprintf_r+0x150>
 80072e0:	9b04      	ldr	r3, [sp, #16]
 80072e2:	eba0 000a 	sub.w	r0, r0, sl
 80072e6:	2240      	movs	r2, #64	@ 0x40
 80072e8:	4082      	lsls	r2, r0
 80072ea:	4313      	orrs	r3, r2
 80072ec:	3401      	adds	r4, #1
 80072ee:	9304      	str	r3, [sp, #16]
 80072f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f4:	4824      	ldr	r0, [pc, #144]	@ (8007388 <_svfiprintf_r+0x1e8>)
 80072f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072fa:	2206      	movs	r2, #6
 80072fc:	f7f8 ff70 	bl	80001e0 <memchr>
 8007300:	2800      	cmp	r0, #0
 8007302:	d036      	beq.n	8007372 <_svfiprintf_r+0x1d2>
 8007304:	4b21      	ldr	r3, [pc, #132]	@ (800738c <_svfiprintf_r+0x1ec>)
 8007306:	bb1b      	cbnz	r3, 8007350 <_svfiprintf_r+0x1b0>
 8007308:	9b03      	ldr	r3, [sp, #12]
 800730a:	3307      	adds	r3, #7
 800730c:	f023 0307 	bic.w	r3, r3, #7
 8007310:	3308      	adds	r3, #8
 8007312:	9303      	str	r3, [sp, #12]
 8007314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007316:	4433      	add	r3, r6
 8007318:	9309      	str	r3, [sp, #36]	@ 0x24
 800731a:	e76a      	b.n	80071f2 <_svfiprintf_r+0x52>
 800731c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007320:	460c      	mov	r4, r1
 8007322:	2001      	movs	r0, #1
 8007324:	e7a8      	b.n	8007278 <_svfiprintf_r+0xd8>
 8007326:	2300      	movs	r3, #0
 8007328:	3401      	adds	r4, #1
 800732a:	9305      	str	r3, [sp, #20]
 800732c:	4619      	mov	r1, r3
 800732e:	f04f 0c0a 	mov.w	ip, #10
 8007332:	4620      	mov	r0, r4
 8007334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007338:	3a30      	subs	r2, #48	@ 0x30
 800733a:	2a09      	cmp	r2, #9
 800733c:	d903      	bls.n	8007346 <_svfiprintf_r+0x1a6>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0c6      	beq.n	80072d0 <_svfiprintf_r+0x130>
 8007342:	9105      	str	r1, [sp, #20]
 8007344:	e7c4      	b.n	80072d0 <_svfiprintf_r+0x130>
 8007346:	fb0c 2101 	mla	r1, ip, r1, r2
 800734a:	4604      	mov	r4, r0
 800734c:	2301      	movs	r3, #1
 800734e:	e7f0      	b.n	8007332 <_svfiprintf_r+0x192>
 8007350:	ab03      	add	r3, sp, #12
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	462a      	mov	r2, r5
 8007356:	4b0e      	ldr	r3, [pc, #56]	@ (8007390 <_svfiprintf_r+0x1f0>)
 8007358:	a904      	add	r1, sp, #16
 800735a:	4638      	mov	r0, r7
 800735c:	f3af 8000 	nop.w
 8007360:	1c42      	adds	r2, r0, #1
 8007362:	4606      	mov	r6, r0
 8007364:	d1d6      	bne.n	8007314 <_svfiprintf_r+0x174>
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	065b      	lsls	r3, r3, #25
 800736a:	f53f af2d 	bmi.w	80071c8 <_svfiprintf_r+0x28>
 800736e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007370:	e72c      	b.n	80071cc <_svfiprintf_r+0x2c>
 8007372:	ab03      	add	r3, sp, #12
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	462a      	mov	r2, r5
 8007378:	4b05      	ldr	r3, [pc, #20]	@ (8007390 <_svfiprintf_r+0x1f0>)
 800737a:	a904      	add	r1, sp, #16
 800737c:	4638      	mov	r0, r7
 800737e:	f000 f879 	bl	8007474 <_printf_i>
 8007382:	e7ed      	b.n	8007360 <_svfiprintf_r+0x1c0>
 8007384:	080078e0 	.word	0x080078e0
 8007388:	080078ea 	.word	0x080078ea
 800738c:	00000000 	.word	0x00000000
 8007390:	080070e9 	.word	0x080070e9
 8007394:	080078e6 	.word	0x080078e6

08007398 <_printf_common>:
 8007398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800739c:	4616      	mov	r6, r2
 800739e:	4698      	mov	r8, r3
 80073a0:	688a      	ldr	r2, [r1, #8]
 80073a2:	690b      	ldr	r3, [r1, #16]
 80073a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	bfb8      	it	lt
 80073ac:	4613      	movlt	r3, r2
 80073ae:	6033      	str	r3, [r6, #0]
 80073b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073b4:	4607      	mov	r7, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	b10a      	cbz	r2, 80073be <_printf_common+0x26>
 80073ba:	3301      	adds	r3, #1
 80073bc:	6033      	str	r3, [r6, #0]
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	0699      	lsls	r1, r3, #26
 80073c2:	bf42      	ittt	mi
 80073c4:	6833      	ldrmi	r3, [r6, #0]
 80073c6:	3302      	addmi	r3, #2
 80073c8:	6033      	strmi	r3, [r6, #0]
 80073ca:	6825      	ldr	r5, [r4, #0]
 80073cc:	f015 0506 	ands.w	r5, r5, #6
 80073d0:	d106      	bne.n	80073e0 <_printf_common+0x48>
 80073d2:	f104 0a19 	add.w	sl, r4, #25
 80073d6:	68e3      	ldr	r3, [r4, #12]
 80073d8:	6832      	ldr	r2, [r6, #0]
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	42ab      	cmp	r3, r5
 80073de:	dc26      	bgt.n	800742e <_printf_common+0x96>
 80073e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073e4:	6822      	ldr	r2, [r4, #0]
 80073e6:	3b00      	subs	r3, #0
 80073e8:	bf18      	it	ne
 80073ea:	2301      	movne	r3, #1
 80073ec:	0692      	lsls	r2, r2, #26
 80073ee:	d42b      	bmi.n	8007448 <_printf_common+0xb0>
 80073f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073f4:	4641      	mov	r1, r8
 80073f6:	4638      	mov	r0, r7
 80073f8:	47c8      	blx	r9
 80073fa:	3001      	adds	r0, #1
 80073fc:	d01e      	beq.n	800743c <_printf_common+0xa4>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	6922      	ldr	r2, [r4, #16]
 8007402:	f003 0306 	and.w	r3, r3, #6
 8007406:	2b04      	cmp	r3, #4
 8007408:	bf02      	ittt	eq
 800740a:	68e5      	ldreq	r5, [r4, #12]
 800740c:	6833      	ldreq	r3, [r6, #0]
 800740e:	1aed      	subeq	r5, r5, r3
 8007410:	68a3      	ldr	r3, [r4, #8]
 8007412:	bf0c      	ite	eq
 8007414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007418:	2500      	movne	r5, #0
 800741a:	4293      	cmp	r3, r2
 800741c:	bfc4      	itt	gt
 800741e:	1a9b      	subgt	r3, r3, r2
 8007420:	18ed      	addgt	r5, r5, r3
 8007422:	2600      	movs	r6, #0
 8007424:	341a      	adds	r4, #26
 8007426:	42b5      	cmp	r5, r6
 8007428:	d11a      	bne.n	8007460 <_printf_common+0xc8>
 800742a:	2000      	movs	r0, #0
 800742c:	e008      	b.n	8007440 <_printf_common+0xa8>
 800742e:	2301      	movs	r3, #1
 8007430:	4652      	mov	r2, sl
 8007432:	4641      	mov	r1, r8
 8007434:	4638      	mov	r0, r7
 8007436:	47c8      	blx	r9
 8007438:	3001      	adds	r0, #1
 800743a:	d103      	bne.n	8007444 <_printf_common+0xac>
 800743c:	f04f 30ff 	mov.w	r0, #4294967295
 8007440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007444:	3501      	adds	r5, #1
 8007446:	e7c6      	b.n	80073d6 <_printf_common+0x3e>
 8007448:	18e1      	adds	r1, r4, r3
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	2030      	movs	r0, #48	@ 0x30
 800744e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007452:	4422      	add	r2, r4
 8007454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800745c:	3302      	adds	r3, #2
 800745e:	e7c7      	b.n	80073f0 <_printf_common+0x58>
 8007460:	2301      	movs	r3, #1
 8007462:	4622      	mov	r2, r4
 8007464:	4641      	mov	r1, r8
 8007466:	4638      	mov	r0, r7
 8007468:	47c8      	blx	r9
 800746a:	3001      	adds	r0, #1
 800746c:	d0e6      	beq.n	800743c <_printf_common+0xa4>
 800746e:	3601      	adds	r6, #1
 8007470:	e7d9      	b.n	8007426 <_printf_common+0x8e>
	...

08007474 <_printf_i>:
 8007474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	7e0f      	ldrb	r7, [r1, #24]
 800747a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800747c:	2f78      	cmp	r7, #120	@ 0x78
 800747e:	4691      	mov	r9, r2
 8007480:	4680      	mov	r8, r0
 8007482:	460c      	mov	r4, r1
 8007484:	469a      	mov	sl, r3
 8007486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800748a:	d807      	bhi.n	800749c <_printf_i+0x28>
 800748c:	2f62      	cmp	r7, #98	@ 0x62
 800748e:	d80a      	bhi.n	80074a6 <_printf_i+0x32>
 8007490:	2f00      	cmp	r7, #0
 8007492:	f000 80d2 	beq.w	800763a <_printf_i+0x1c6>
 8007496:	2f58      	cmp	r7, #88	@ 0x58
 8007498:	f000 80b9 	beq.w	800760e <_printf_i+0x19a>
 800749c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80074a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074a4:	e03a      	b.n	800751c <_printf_i+0xa8>
 80074a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074aa:	2b15      	cmp	r3, #21
 80074ac:	d8f6      	bhi.n	800749c <_printf_i+0x28>
 80074ae:	a101      	add	r1, pc, #4	@ (adr r1, 80074b4 <_printf_i+0x40>)
 80074b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074b4:	0800750d 	.word	0x0800750d
 80074b8:	08007521 	.word	0x08007521
 80074bc:	0800749d 	.word	0x0800749d
 80074c0:	0800749d 	.word	0x0800749d
 80074c4:	0800749d 	.word	0x0800749d
 80074c8:	0800749d 	.word	0x0800749d
 80074cc:	08007521 	.word	0x08007521
 80074d0:	0800749d 	.word	0x0800749d
 80074d4:	0800749d 	.word	0x0800749d
 80074d8:	0800749d 	.word	0x0800749d
 80074dc:	0800749d 	.word	0x0800749d
 80074e0:	08007621 	.word	0x08007621
 80074e4:	0800754b 	.word	0x0800754b
 80074e8:	080075db 	.word	0x080075db
 80074ec:	0800749d 	.word	0x0800749d
 80074f0:	0800749d 	.word	0x0800749d
 80074f4:	08007643 	.word	0x08007643
 80074f8:	0800749d 	.word	0x0800749d
 80074fc:	0800754b 	.word	0x0800754b
 8007500:	0800749d 	.word	0x0800749d
 8007504:	0800749d 	.word	0x0800749d
 8007508:	080075e3 	.word	0x080075e3
 800750c:	6833      	ldr	r3, [r6, #0]
 800750e:	1d1a      	adds	r2, r3, #4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6032      	str	r2, [r6, #0]
 8007514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800751c:	2301      	movs	r3, #1
 800751e:	e09d      	b.n	800765c <_printf_i+0x1e8>
 8007520:	6833      	ldr	r3, [r6, #0]
 8007522:	6820      	ldr	r0, [r4, #0]
 8007524:	1d19      	adds	r1, r3, #4
 8007526:	6031      	str	r1, [r6, #0]
 8007528:	0606      	lsls	r6, r0, #24
 800752a:	d501      	bpl.n	8007530 <_printf_i+0xbc>
 800752c:	681d      	ldr	r5, [r3, #0]
 800752e:	e003      	b.n	8007538 <_printf_i+0xc4>
 8007530:	0645      	lsls	r5, r0, #25
 8007532:	d5fb      	bpl.n	800752c <_printf_i+0xb8>
 8007534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007538:	2d00      	cmp	r5, #0
 800753a:	da03      	bge.n	8007544 <_printf_i+0xd0>
 800753c:	232d      	movs	r3, #45	@ 0x2d
 800753e:	426d      	negs	r5, r5
 8007540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007544:	4859      	ldr	r0, [pc, #356]	@ (80076ac <_printf_i+0x238>)
 8007546:	230a      	movs	r3, #10
 8007548:	e011      	b.n	800756e <_printf_i+0xfa>
 800754a:	6821      	ldr	r1, [r4, #0]
 800754c:	6833      	ldr	r3, [r6, #0]
 800754e:	0608      	lsls	r0, r1, #24
 8007550:	f853 5b04 	ldr.w	r5, [r3], #4
 8007554:	d402      	bmi.n	800755c <_printf_i+0xe8>
 8007556:	0649      	lsls	r1, r1, #25
 8007558:	bf48      	it	mi
 800755a:	b2ad      	uxthmi	r5, r5
 800755c:	2f6f      	cmp	r7, #111	@ 0x6f
 800755e:	4853      	ldr	r0, [pc, #332]	@ (80076ac <_printf_i+0x238>)
 8007560:	6033      	str	r3, [r6, #0]
 8007562:	bf14      	ite	ne
 8007564:	230a      	movne	r3, #10
 8007566:	2308      	moveq	r3, #8
 8007568:	2100      	movs	r1, #0
 800756a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800756e:	6866      	ldr	r6, [r4, #4]
 8007570:	60a6      	str	r6, [r4, #8]
 8007572:	2e00      	cmp	r6, #0
 8007574:	bfa2      	ittt	ge
 8007576:	6821      	ldrge	r1, [r4, #0]
 8007578:	f021 0104 	bicge.w	r1, r1, #4
 800757c:	6021      	strge	r1, [r4, #0]
 800757e:	b90d      	cbnz	r5, 8007584 <_printf_i+0x110>
 8007580:	2e00      	cmp	r6, #0
 8007582:	d04b      	beq.n	800761c <_printf_i+0x1a8>
 8007584:	4616      	mov	r6, r2
 8007586:	fbb5 f1f3 	udiv	r1, r5, r3
 800758a:	fb03 5711 	mls	r7, r3, r1, r5
 800758e:	5dc7      	ldrb	r7, [r0, r7]
 8007590:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007594:	462f      	mov	r7, r5
 8007596:	42bb      	cmp	r3, r7
 8007598:	460d      	mov	r5, r1
 800759a:	d9f4      	bls.n	8007586 <_printf_i+0x112>
 800759c:	2b08      	cmp	r3, #8
 800759e:	d10b      	bne.n	80075b8 <_printf_i+0x144>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	07df      	lsls	r7, r3, #31
 80075a4:	d508      	bpl.n	80075b8 <_printf_i+0x144>
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	4299      	cmp	r1, r3
 80075ac:	bfde      	ittt	le
 80075ae:	2330      	movle	r3, #48	@ 0x30
 80075b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075b8:	1b92      	subs	r2, r2, r6
 80075ba:	6122      	str	r2, [r4, #16]
 80075bc:	f8cd a000 	str.w	sl, [sp]
 80075c0:	464b      	mov	r3, r9
 80075c2:	aa03      	add	r2, sp, #12
 80075c4:	4621      	mov	r1, r4
 80075c6:	4640      	mov	r0, r8
 80075c8:	f7ff fee6 	bl	8007398 <_printf_common>
 80075cc:	3001      	adds	r0, #1
 80075ce:	d14a      	bne.n	8007666 <_printf_i+0x1f2>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	b004      	add	sp, #16
 80075d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	f043 0320 	orr.w	r3, r3, #32
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	4833      	ldr	r0, [pc, #204]	@ (80076b0 <_printf_i+0x23c>)
 80075e4:	2778      	movs	r7, #120	@ 0x78
 80075e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	6831      	ldr	r1, [r6, #0]
 80075ee:	061f      	lsls	r7, r3, #24
 80075f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80075f4:	d402      	bmi.n	80075fc <_printf_i+0x188>
 80075f6:	065f      	lsls	r7, r3, #25
 80075f8:	bf48      	it	mi
 80075fa:	b2ad      	uxthmi	r5, r5
 80075fc:	6031      	str	r1, [r6, #0]
 80075fe:	07d9      	lsls	r1, r3, #31
 8007600:	bf44      	itt	mi
 8007602:	f043 0320 	orrmi.w	r3, r3, #32
 8007606:	6023      	strmi	r3, [r4, #0]
 8007608:	b11d      	cbz	r5, 8007612 <_printf_i+0x19e>
 800760a:	2310      	movs	r3, #16
 800760c:	e7ac      	b.n	8007568 <_printf_i+0xf4>
 800760e:	4827      	ldr	r0, [pc, #156]	@ (80076ac <_printf_i+0x238>)
 8007610:	e7e9      	b.n	80075e6 <_printf_i+0x172>
 8007612:	6823      	ldr	r3, [r4, #0]
 8007614:	f023 0320 	bic.w	r3, r3, #32
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	e7f6      	b.n	800760a <_printf_i+0x196>
 800761c:	4616      	mov	r6, r2
 800761e:	e7bd      	b.n	800759c <_printf_i+0x128>
 8007620:	6833      	ldr	r3, [r6, #0]
 8007622:	6825      	ldr	r5, [r4, #0]
 8007624:	6961      	ldr	r1, [r4, #20]
 8007626:	1d18      	adds	r0, r3, #4
 8007628:	6030      	str	r0, [r6, #0]
 800762a:	062e      	lsls	r6, r5, #24
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	d501      	bpl.n	8007634 <_printf_i+0x1c0>
 8007630:	6019      	str	r1, [r3, #0]
 8007632:	e002      	b.n	800763a <_printf_i+0x1c6>
 8007634:	0668      	lsls	r0, r5, #25
 8007636:	d5fb      	bpl.n	8007630 <_printf_i+0x1bc>
 8007638:	8019      	strh	r1, [r3, #0]
 800763a:	2300      	movs	r3, #0
 800763c:	6123      	str	r3, [r4, #16]
 800763e:	4616      	mov	r6, r2
 8007640:	e7bc      	b.n	80075bc <_printf_i+0x148>
 8007642:	6833      	ldr	r3, [r6, #0]
 8007644:	1d1a      	adds	r2, r3, #4
 8007646:	6032      	str	r2, [r6, #0]
 8007648:	681e      	ldr	r6, [r3, #0]
 800764a:	6862      	ldr	r2, [r4, #4]
 800764c:	2100      	movs	r1, #0
 800764e:	4630      	mov	r0, r6
 8007650:	f7f8 fdc6 	bl	80001e0 <memchr>
 8007654:	b108      	cbz	r0, 800765a <_printf_i+0x1e6>
 8007656:	1b80      	subs	r0, r0, r6
 8007658:	6060      	str	r0, [r4, #4]
 800765a:	6863      	ldr	r3, [r4, #4]
 800765c:	6123      	str	r3, [r4, #16]
 800765e:	2300      	movs	r3, #0
 8007660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007664:	e7aa      	b.n	80075bc <_printf_i+0x148>
 8007666:	6923      	ldr	r3, [r4, #16]
 8007668:	4632      	mov	r2, r6
 800766a:	4649      	mov	r1, r9
 800766c:	4640      	mov	r0, r8
 800766e:	47d0      	blx	sl
 8007670:	3001      	adds	r0, #1
 8007672:	d0ad      	beq.n	80075d0 <_printf_i+0x15c>
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	079b      	lsls	r3, r3, #30
 8007678:	d413      	bmi.n	80076a2 <_printf_i+0x22e>
 800767a:	68e0      	ldr	r0, [r4, #12]
 800767c:	9b03      	ldr	r3, [sp, #12]
 800767e:	4298      	cmp	r0, r3
 8007680:	bfb8      	it	lt
 8007682:	4618      	movlt	r0, r3
 8007684:	e7a6      	b.n	80075d4 <_printf_i+0x160>
 8007686:	2301      	movs	r3, #1
 8007688:	4632      	mov	r2, r6
 800768a:	4649      	mov	r1, r9
 800768c:	4640      	mov	r0, r8
 800768e:	47d0      	blx	sl
 8007690:	3001      	adds	r0, #1
 8007692:	d09d      	beq.n	80075d0 <_printf_i+0x15c>
 8007694:	3501      	adds	r5, #1
 8007696:	68e3      	ldr	r3, [r4, #12]
 8007698:	9903      	ldr	r1, [sp, #12]
 800769a:	1a5b      	subs	r3, r3, r1
 800769c:	42ab      	cmp	r3, r5
 800769e:	dcf2      	bgt.n	8007686 <_printf_i+0x212>
 80076a0:	e7eb      	b.n	800767a <_printf_i+0x206>
 80076a2:	2500      	movs	r5, #0
 80076a4:	f104 0619 	add.w	r6, r4, #25
 80076a8:	e7f5      	b.n	8007696 <_printf_i+0x222>
 80076aa:	bf00      	nop
 80076ac:	080078f1 	.word	0x080078f1
 80076b0:	08007902 	.word	0x08007902

080076b4 <memmove>:
 80076b4:	4288      	cmp	r0, r1
 80076b6:	b510      	push	{r4, lr}
 80076b8:	eb01 0402 	add.w	r4, r1, r2
 80076bc:	d902      	bls.n	80076c4 <memmove+0x10>
 80076be:	4284      	cmp	r4, r0
 80076c0:	4623      	mov	r3, r4
 80076c2:	d807      	bhi.n	80076d4 <memmove+0x20>
 80076c4:	1e43      	subs	r3, r0, #1
 80076c6:	42a1      	cmp	r1, r4
 80076c8:	d008      	beq.n	80076dc <memmove+0x28>
 80076ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076d2:	e7f8      	b.n	80076c6 <memmove+0x12>
 80076d4:	4402      	add	r2, r0
 80076d6:	4601      	mov	r1, r0
 80076d8:	428a      	cmp	r2, r1
 80076da:	d100      	bne.n	80076de <memmove+0x2a>
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076e6:	e7f7      	b.n	80076d8 <memmove+0x24>

080076e8 <_sbrk_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d06      	ldr	r5, [pc, #24]	@ (8007704 <_sbrk_r+0x1c>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	4604      	mov	r4, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	f7f9 fa1a 	bl	8000b2c <_sbrk>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_sbrk_r+0x1a>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_sbrk_r+0x1a>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	20001b5c 	.word	0x20001b5c

08007708 <_realloc_r>:
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	4680      	mov	r8, r0
 800770e:	4615      	mov	r5, r2
 8007710:	460c      	mov	r4, r1
 8007712:	b921      	cbnz	r1, 800771e <_realloc_r+0x16>
 8007714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007718:	4611      	mov	r1, r2
 800771a:	f7ff bc59 	b.w	8006fd0 <_malloc_r>
 800771e:	b92a      	cbnz	r2, 800772c <_realloc_r+0x24>
 8007720:	f7ff fbea 	bl	8006ef8 <_free_r>
 8007724:	2400      	movs	r4, #0
 8007726:	4620      	mov	r0, r4
 8007728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800772c:	f000 f81a 	bl	8007764 <_malloc_usable_size_r>
 8007730:	4285      	cmp	r5, r0
 8007732:	4606      	mov	r6, r0
 8007734:	d802      	bhi.n	800773c <_realloc_r+0x34>
 8007736:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800773a:	d8f4      	bhi.n	8007726 <_realloc_r+0x1e>
 800773c:	4629      	mov	r1, r5
 800773e:	4640      	mov	r0, r8
 8007740:	f7ff fc46 	bl	8006fd0 <_malloc_r>
 8007744:	4607      	mov	r7, r0
 8007746:	2800      	cmp	r0, #0
 8007748:	d0ec      	beq.n	8007724 <_realloc_r+0x1c>
 800774a:	42b5      	cmp	r5, r6
 800774c:	462a      	mov	r2, r5
 800774e:	4621      	mov	r1, r4
 8007750:	bf28      	it	cs
 8007752:	4632      	movcs	r2, r6
 8007754:	f7ff fbc2 	bl	8006edc <memcpy>
 8007758:	4621      	mov	r1, r4
 800775a:	4640      	mov	r0, r8
 800775c:	f7ff fbcc 	bl	8006ef8 <_free_r>
 8007760:	463c      	mov	r4, r7
 8007762:	e7e0      	b.n	8007726 <_realloc_r+0x1e>

08007764 <_malloc_usable_size_r>:
 8007764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007768:	1f18      	subs	r0, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	bfbc      	itt	lt
 800776e:	580b      	ldrlt	r3, [r1, r0]
 8007770:	18c0      	addlt	r0, r0, r3
 8007772:	4770      	bx	lr

08007774 <_init>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	bf00      	nop
 8007778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800777a:	bc08      	pop	{r3}
 800777c:	469e      	mov	lr, r3
 800777e:	4770      	bx	lr

08007780 <_fini>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr
